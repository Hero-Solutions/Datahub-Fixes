# Catmandu Fix
#
# Institution: Museum voor Schone Kunsten Gent
# Description: Converts Adlib Structured XML exposed via ErfgoedInzicht OAI to LIDO 1.0
# Created: 6/7/2021



### Prepare an intermediate structure

# Copy relevant Adlib fields in order to create a dedicated lido structure

#    copy_field(_metadata.Digital_reference, or_record.pids)
#    copy_field(_metadata.Alternative_number, or_record.workPid)
    copy_field(_metadata.Object_name, or_record.object_name)
    copy_field(_metadata.object_category, or_record.object_category)
    copy_field('_metadata.object_category\.lref', or_record.object_category_id)
    copy_field(_metadata.administration_name, or_record.department)
    copy_field(_metadata.collection, or_record.collection)
    copy_field(_metadata.Title, or_record.title)
    copy_field(_metadata.Titel_translation, or_record.title_translation)
    copy_field(_metadata.Inscription, or_record.inscription)
    copy_field('_metadata.institution\.name', or_record.institution)
    copy_field(_metadata.object_number, or_record.object_number)
    copy_field(_metadata.Current_location, or_record.current_location)
    copy_field(_metadata.Description, or_record.description)
    copy_field(_metadata.Dimension, or_record.dimensions)
#    copy_field(_metadata.Acquisition_source, or_record.acquisition_source)
#    copy_field('_metadata.acquisition\.date', or_record.acquisition_date)
#    copy_field('_metadata.acquisition\.method', or_record.acquisition_method)
#    copy_field('_metadata.acquisition\.method\.lref', or_record.acquisition_method_id)
    copy_field(_metadata.Production, or_record.production)
    copy_field(_metadata.Production_date, or_record.production_date)
    copy_field('_metadata.production\.period', or_record.production_period)
    copy_field('_metadata.production\.period\.lref', or_record.production_period_id)
    copy_field(_metadata.school_style, or_record.style)
    copy_field(_metadata.Material, or_record.materials)
    copy_field(_metadata.Technique, or_record.technique)
    copy_field(_metadata.physical_description, or_record.physical_description)
    copy_field('_metadata.content\.motif\.general', or_record.content_motif_general)
    copy_field('_metadata.content\.motif\.general\.lref', or_record.content_motif_general_id)
    copy_field('_metadata.content\.motif\.specific', or_record.content_motif_specific)
    copy_field(_metadata.Content_subject, or_record.depicted_subject)
    copy_field(_metadata.Content_person, or_record.depicted_person)
    copy_field(_metadata.priref, or_record.priref)

# Remove all Adlib fields, retaining only the fields to create the lido structure

    retain(or_record)



### Mapping to lido structure

# Mapping Facets
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Adlib                                             LIDO                                                VKC                     Invulboek veld
#                                                       lido:lidoRecID
#   Digital_reference.digital_reference                     type: purl                                                              waarde databanknummer
#                                                           type: urn
#   Alternative_number                                  lido:objectPublishedID                              Work PURL               waarde objectnummer
#                                                       lido:category
#                                                       lido:objectWorkType
#                                                           lido:conceptID
#   Object_name.object_name.source + term\.number               pref: preferred
#                                                               pref: alternate                                                     identificatie objectnaam
#                                                           lido:term
#                                                               pref: preferred
#   Object_name.object_name.term                                    lang: nl                                Subtype                 term objectnaam
#   Object_name.object_name.notes                                   lang: fr
#   Object_name.object_name.notes                                   lang: en
#                                                               pref: alternate                             Subtype
#                                                       lido:classification
#                                                           type: object-category
#                                                               lido:conceptID
#   object_category.source + term\.number                           pref: preferred
#                                                                   pref: alternate                                                 identificatie
#                                                               lido:term
#                                                                   pref: preferred
#   object_category.term                                                lang: nl                            Type                    term
#   object_category.notes                                               lang: fr
#   object_category.notes                                               lang: en
#                                                                   pref: alternate                         Type
#                                                           type: department
#   administration_name                                         lido:term
#                                                           type: collection
#   collection.source + term\.number                            lido:conceptID
#                                                               lido:term
#   collection.term                                                 lang: nl
#   collection.notes                                                lang: fr
#   collection.notes                                                lang: en
#                                                       lido:titleSet
#   Title.title                                             lang: nl                                                                titel
#   Titel_translation.title\.translation                    lang: fr
#   Titel_translation.title\.translation                    lang: en
#                                                       lido:inscriptions
#   Inscription.inscription\.content                        lido:inscriptionTranscription
#                                                           lido:inscriptionDescription
#                                                               type: type
#   Inscription.inscription\.type.source + term\.number             liod:descriptiveNoteID
#                                                                   lido:descriptiveNoteValue
#   Inscription.inscription\.type.term                                  lang: nl
#   Inscription.inscription\.type.notes                                 lang: fr
#   Inscription.inscription\.type.notes                                 lang: en
#                                                               type: position
#                                                                   lido:descriptiveNoteValue
#   Inscription.inscription\.position.term                              lang: nl
#   Inscription.inscription\.position.notes                             lang: fr
#   Inscription.inscription\.position.notes                             lang: en
#                                                       lido:repositorySet
#   institution\.name.name                                  lido:repositoryName                             Instelling              naam bewaarinstelling
#                                                           lido:workID
#   object_number                                               type: object-number                         Inventarisnummer        waarde objectnummer
#   Current_location                                        lido:repositoryLocation
#                                                       lido:objectDescriptionSet
#   Description.description                                 lang: nl                                        Beschrijving            korte beschrijving
#   Description.description                                 lang: fr
#   Description.description                                 lang: en
#                                                       lido:objectMeasurementsSet
#                                                           lido:objectMeasurements
#                                                               lido:measurementsSet
#   Dimension.dimension\.type                                       lido:measurementType                                            dimensie afmeting
#   Dimension.dimension\.unit                                       lido:measurementUnit                                            eenheid afmeting
#   Dimension.dimension\.value                                      lido:measurementValue                                           waarde afmeting
#   Dimension.dimension\.part                                   lido:extentMeasurements                                             onderdeel afmeting
#                                                           lido:displayObjectMeasurements                  Dimensies
#                                                       lido:eventType
#                                                           lido:term
#                                                               acquisition
#   Acquisition_source.acquisition\.source                          lido:eventActor                                                 naam verwervingsbron
#                                                                   lido:eventDate
#   acquisition\.date                                                   lido:displayDate                                            waarde verwervingdatum
#                                                                   lido:eventMethod
#                                                                       lido:conceptID
#   acquisition\.method\.lref                                               pref: preferred
#                                                                           pref: alternate                                         identifictatie verwervingsmethode
#                                                                       lido:term
#   acquisition\.method                                                     pref: preferred                                         term verwervingsmethode
#                                                                           pref: alternate
#                                                       lido:eventType
#                                                           lido:term
#                                                               production
#                                                                   lido:eventActor
#                                                                       lido:actorID
#   Production.creator\.lref                                                type: local
#   Production.creator.Source                                               type: purl                                              identificatie vervaardiger
#   Production.creator.name                                             lido:nameActorSet
#                                                                           pref: preferred                 Vervaardiger            naam vervaardiger
#                                                                           pref: alternate
#                                                                       lido:vitalDatesActor
#                                                                           type: birth-date
#   Production.creator.birth\.date\.start                                       lido:earliestDate
#   Production.creator.birth\.date\.end                                         lido:latestDate
#                                                                           type: death-date
#   Production.creator.death\.date\.start                                       lido:earliestDate
#   Production.creator.death\.date\.end                                         lido:latestDate
#                                                                       lido:vitalPlaceActor
#                                                                           type: birth-place
#   Production.creator.birth\.place.source + term\.number                       lido:placeID
#                                                                               lido:namePlaceSet
#   Production.creator.birth\.place.term                                            lang: nl
#   Production.creator.birth\.place.notes                                           lang: fr
#   Production.creator.birth\.place.notes                                           lang: en
#                                                                           type: death-place
#   Production.creator.death\.place.source + term\.number                       lido:placeID
#                                                                               lido:namePlaceSet
#   Production.creator.death\.place.term                                            lang: nl
#   Production.creator.death\.place.notes                                           lang: fr
#   Production.creator.death\.place.notes                                           lang: en
#                                                                       lido:roleActor
#   Production.creator\.role.source + term\.number                          lido:conceptID
#                                                                           lido:term
#   Production.creator\.role.term                                               lang: nl                    Vervaardiger            rol vervaardiger
#   Production.creator\.role.notes                                              lang: fr
#   Production.creator\.role.notes                                              lang: en
#   Production.creator\.qualifier                                       lido:attributionQualifierActor      Vervaardiger            kwalificatie vervaardiger
#                                                                   lido:eventDate
#                                                                       lido:displayDate                    Datering
#   Production_date.production\.date\.start                             lido:earliestDate                                           begindatum
#   Production_date.production\.date\.start\.prec                           type
#   Production_date.production\.date\.end                               lido:latestDate                                             einddatum
#   Production_date.production\.date\.end\.prec                             type
#                                                                   lido:periodName
#                                                                       no type
#   production\.period\.lref                                                lido:conceptID
#                                                                           lido:term
#   production\.period.term                                                     lang: nl
#   production\.period.notes                                                    lang: fr
#   production\.period.notes                                                    lang: en
#                                                                       type: style
#   school_style.source + term\.number                                      lido:conceptID
#                                                                           lido:term
#   school_style.term                                                           lang: nl
#   school_style.notes                                                          lang: fr
#   school_style.notes                                                          lang: en
#                                                                   lido:eventPlace
#                                                                       lido:placeID
#   Production.production\.place\.lref                                      type: local
#                                                                       lido:namePlaceSet
#   Production.production\.place                                            type: preferred
#                                                                   lido:termMaterialsTech
#                                                                       type: material
#                                                                           lido:conceptID
#   Material.material.source + term\.number                                     pref: preferred
#                                                                               pref: alternate                                     identificatie materiaal
#                                                                           lido:term
#                                                                               pref: preferred
#   Material.material.term                                                          lang: nl                Materiaal               term materiaal
#   Material.material.notes                                                         lang: fr
#   Material.material.notes                                                         lang: en
#                                                                               pref: alternate
#                                                                       type: technique
#                                                                           lido:conceptID
#   Technique.technique.source + term\.number                                   pref: preferred
#                                                                           lido:term
#                                                                               pref: preferred
#   Technique.technique.term                                                        lang: nl
#   Technique.technique.notes                                                       lang: fr
#   Technique.technique.notes                                                       lang: en
#   physical_description                                            lido:displayMaterialsTech
#                                                       lido:eventType
#                                                           lido:term
#                                                               check
#                                                                   lido:eventDescriptionSet                                        term conditie
#                                                                   lido:eventActor
#                                                                       lido:nameActorSet                                           assessor conditie
#                                                                   lido:eventDate
#                                                                       lido:displayDate                                            datum conditie
#                                                       lido:objectRelationWrap
#                                                           lido:subject
#                                                               type: content-motif-general
#                                                                   lido:subjectConcept
#                                                                       lido:conceptID
#   content\.motif\.general\.lref                                           pref: preferred
#                                                                           pref: alternate                                         identificatie hoofdmotief
#                                                                       lido:term
#   content\.motif\.general.term                                            pref: preferred                 Onderwerp               term hoofdmotief
#                                                                           pref: alternate                 Onderwerp
#                                                               source: Iconclass
#                                                                   lido:subjectConcept
#   content\.motif\.specific.term\.code                                 lido:conceptID                                              identificatie afgebeeld concept
#   content\.motif\.specific.term                                       lido:term                                                   term afgebeeld concept
#                                                               no type
#                                                                   lido:subjectConcept
#   Content_subject.content\.subject\.lref                              lido:conceptID                                              identificatie afgebeeld concept
#   Content_subject.content\.subject                                    lido:term                                                   term afgebeeld concept
#                                                                   lido:subjectActor
#   Content_person.content\.person\.name\.lref                          lido:actorID                                                identificatie afgebeelde persoon of instelling
#   Content_person.content\.person\.name                                lido:nameActorSet                                           naam afgebeelde persoon of instelling
#                                                                   lido:subjectEvent
#   Content_subject.content\.subject\.lref                              lido:eventID                                                identificatie afgebeelde gebeurtenis
#   Content_subject.content\.subject                                    lido:eventName                                              naam afgebeelde gebeurtenis
#                                                                   lido:subjectPlace
#   Content_subject.content\.subject\.lref                              lido:placeID                                                identificatie afgebeelde locatie
#   Content_subject.content\.subject                                    lido:namePlaceSet                                           naam afgebeelde locatie
#                                                       lido:rightsWorkWrap
#                                                           lido:rightsType
#                                                               lido:conceptID                                                      identificatie rechten werk
#                                                               lido:term                                                           term rechten werk
#                                                           lido:creditLine
#                                                       lido:recordWrap
#                                                           lido:recordID
#   Digital_reference.digital_reference                         type: global                                Data PURL               waarde databanknummer
#   priref                                                      type: local                                                         waarde databanknummer
#                                                           lido:recordType
#                                                               lido:conceptID
#                                                               lido:term
#                                                           lido:recordSource
#                                                               lido:legalBodyID                                                    identificatie data provider
#   institution\.name.name                                      lido:legalBodyName                                                  naam data provider
#                                                               lido:legalBodyWeblink
#                                                           lido:recordRights
#                                                               lido:rightsType
#                                                                   type:conceptID                                                  identificatie rechten status
#                                                                   type:term                                                       term rechten status
#                                                       lido:resourceWrap
#   Digital_reference.digital_reference                     lido:resourceID
#   Digital_reference.digital_reference                     lido:resourceRepresentation



### LIDO lidoRecID

    # ID
    #
    # The ID in Solr is based on the data_pid. The data_pid is converted to a string
    # which can be safely used as an identifier in Project Blacklight. The format of
    # the ID field looks like this:
    #
    #   oai:datahub.mskgent.be:<domain>:<identifier>
    #   ex. oai:datahub.mskgent.be:mskgent.be:254
    #   ex. oai:datahub.mskgent.be:collectievlaamsegemeenschap.be:837
    #
    # Note: the .tld is stripped from the domainname because the . (dot) breaks the
    # route matching algoritm.

#    unless is_array(or_record.pids)
#        move_field(or_record.pids, or_record.tmp)
#        set_array(or_record.pids)
#        move_field(or_record.tmp, or_record.pids.$append)
#    end

#    do list(path:or_record.pids, var: c)

#        if all_match('c.digital_reference\.description', 'datapid')

#            if all_match(c.digital_reference, '.*\S.*')

#                lido_baseid(
#                    lidoRecID,
#                    c.digital_reference,
#                    -type: purl,
#                    -source: 'Museum voor Schone Kunsten Gent',
#                    -label: dataPID,
#                    -pref: alternate
#                )

#                copy_field(c.digital_reference, or_record.oaiPid)
#                parse_text(or_record.oaiPid, '.*://([A-Za-z0-9\-\.]+)/collection/work/data/(.*)')
#                join_field('or_record.oaiPid', ':')
#                prepend('or_record.oaiPid', 'oai:datahub.mskgent.be:')

#                lido_baseid(
#                    lidoRecID,
#                    or_record.oaiPid,
#                    -type: urn,
#                    -source: 'Museum voor Schone Kunsten Gent',
#                    -label: dataPID,
#                    -pref: preferred
#                )

#            end

#        end

#    end

    copy_field(or_record.object_number, or_record.identificator)

    lookup_in_store(or_record.identificator, DBI, data_source: 'dbi:SQLite:/tmp/import.PIDS_ALL_UTF8.sqlite')

    if all_match(or_record.identificator.dataPid, '.*\S.*')

        lido_baseid(
            lidoRecID,
            or_record.identificator.dataPid,
            -type: purl,
            -source: 'Museum voor Schone Kunsten Gent',
            -label: dataPID,
            -pref: alternate
        )

        copy_field('or_record.identificator.dataPid', 'or_record.identificator.oaiPid')
        parse_text('or_record.identificator.oaiPid', '.*://([A-Za-z0-9\-\.]+)/collection/work/data/(.*)')
        join_field('or_record.identificator.oaiPid', ':')
        prepend('or_record.identificator.oaiPid', 'oai:datahub.mskgent.be:')

        lido_baseid(
            lidoRecID,
            or_record.identificator.oaiPid,
            -type: urn,
            -source: 'Museum voor Schone Kunsten Gent',
            -label: dataPID,
            -pref: preferred
        )

    end



### LIDO objectPublishedID

#    unless is_array(or_record.workPid)
#        move_field(or_record.workPid, or_record.tmp)
#        set_array(or_record.workPid)
#        move_field(or_record.tmp, or_record.workPid.$append)
#    end

#    do list(path:or_record.workPid, var: c)

#        if all_match('c.alternative_number\.type', 'workpid')

#            if all_match(c.alternative_number, '.*\S.*')

#                lido_baseid(
#                    objectPublishedID,
#                    c.alternative_number,
#                    -type: purl,
#                    -source: 'Museum voor Schone Kunsten Gent',
#                    -label: workPID
#                )

#            end

#        end

#    end

    if all_match(or_record.identificator.workPid, '.*\S.*')

        lido_baseid(
            objectPublishedID,
            or_record.identificator.workPid,
            -type: purl,
            -source: 'Museum voor Schone Kunsten Gent',
            -label: workPID
        )

    end



### LIDO category

    add_field(or_record.CIDOCCategoryTerm, 'Man-Made Object')
    add_field(or_record.CIDOCCategoryURI, 'http://www.cidoc-crm.org/Entity/e22-man-made-object/version-6.1')

    lido_term(
        category,
        or_record.CIDOCCategoryTerm,
        -conceptid: or_record.CIDOCCategoryURI,
        -type: purl,
        -source: cidoc-crm
    )



### LIDO descriptiveMetadata

## LIDO objectClassificationWrap

# LIDO objectWorkType

    # If it is a string, convert to an array with a single value first.

    unless is_array(or_record.object_name) 
        move_field(or_record.object_name, or_record.tmp)
        set_array(or_record.object_name)
        move_field(or_record.tmp, or_record.object_name.$append)
    end

    # We'll have multiple terms: the corresponding value in AAT from Flemish Art Collection concordance database (type:alternate) and the value from Adlib (type:preferred)

    do list(path: or_record.object_name, var: c)

        # Value in Adlib

        if all_match(c.object_name.term, '.*\S.*')

            add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append)

        else

            if all_match(c.object_name.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append)

            else

                if all_match(c.object_name.notes, '.*\S.*')

                    add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append)

                else

                    if all_match(c.object_name.source, '.*\S.*')

                        add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append)

                    else

                        if all_match('c.object_name.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append)

                        end

                    end

                end

            end

        end

        if all_match(c.object_name.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                c.object_name.term,
                -pref: preferred,
                -lang: nl
            )

        end

        if all_match(c.object_name.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                c.object_name.notes,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.object_name.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                c.object_name.notes.0,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.object_name.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                c.object_name.notes.1,
                -pref: preferred,
                -lang: en
            )

        end

        if all_match(c.object_name.source, '.*\S.*')

            copy_field(c.object_name.source, or_record.object_name_source)

        end

        if all_match('c.object_name.term\.number', '.*\S.*')

            paste(or_record.object_name_source, or_record.object_name_source, 'c.object_name.term\.number', join_char:'')

        end

        if all_match(or_record.object_name_source, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last.conceptID,
                or_record.object_name_source,
                -type: purl,
                -pref: preferred
            )

        end

        if all_match(c.object_name.source, 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last.conceptID.$last.source, 'AAT')

        end

        remove_field(or_record.object_name_source)

        # Corresponding value in AAT from Flemish Art Collection concordance database

        if all_match(c.object_name.term, '.*\S.*')

            copy_field(c.object_name.term, c.object_name_aat)

            lookup_in_store(c.object_name_aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

            if all_match(c.object_name_aat.aatterm, '.*\S.*')

                if all_match(c.object_name_aat.aaturi, '.*\S.*')

                    lido_term(
                        descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                        c.object_name_aat.aatterm,
                        -conceptid: c.object_name_aat.aaturi,
                        -type: purl,
                        -source: AAT,
                        -pref: alternate,
                        -lang: nl
                    )

                else

                    lido_term(
                        descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                        c.object_name_aat.aatterm,
                        -pref: alternate,
                        -lang: nl
                    )

                end

            end

        end

    end

# LIDO classification [type="object-category"]

    unless is_array(or_record.object_category) 
        move_field(or_record.object_category, or_record.tmp)
        set_array(or_record.object_category)
        move_field(or_record.tmp, or_record.object_category.$append)
    end

    # We'll have multiple terms for the type "object-category": the corresponding value in AAT from Flemish Art Collection concordance database (type:alternate) and the value from Adlib (type:preferred)

    do list(path: or_record.object_category, var: c)

        # Value in Adlib

        if all_match(c.term, '.*\S.*')

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "object-category")

        else

            if all_match(c.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "object-category")

            else

                if all_match(c.notes, '.*\S.*')

                    add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "object-category")

                else

                    if all_match(c.source, '.*\S.*')

                        add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "object-category")

                    else

                        if all_match('c.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "object-category")

                        end

                    end

                end

            end

        end

        if all_match(c.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.term,
                -pref: preferred,
                -lang: nl
            )

        end

        if all_match(c.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.notes,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.notes.0,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.notes.1,
                -pref: preferred,
                -lang: en
            )

        end

        if all_match(c.source, '.*\S.*')

            copy_field(c.source, or_record.object_category_source)

        end

        if all_match('c.term\.number', '.*\S.*')

            paste(or_record.object_category_source, or_record.object_category_source, 'c.term\.number', join_char:'')

        end

        if all_match(or_record.object_category_source, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.conceptID,
                or_record.object_category_source,
                -type: purl,
                -pref: preferred
            )

        end

        if all_match(c.source, 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.conceptID.$last.source, 'AAT')

        end

        remove_field(or_record.object_category_source)

        # Corresponding value in AAT from Flemish Art Collection concordance database

        if all_match(c.term, '.*\S.*')

            copy_field(c.term, c.object_category_aat)

            lookup_in_store(c.object_category_aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

            if all_match(c.object_category_aat.aatterm, '.*\S.*')

                if all_match(c.object_category_aat.aaturi, '.*\S.*')

                    lido_term(
                        descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                        c.object_category_aat.aatterm,
                        -conceptid: c.object_category_aat.aaturi,
                        -type: purl,
                        -source: AAT,
                        -pref: alternate,
                        -lang: nl
                    )

                else

                    lido_term(
                        descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                        c.object_category_aat.aatterm,
                        -pref: alternate,
                        -lang: nl
                    )

                end

                add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.type, "object-category")

            end

        end

    end

# LIDO classification [type="department"]

    unless is_array(or_record.department) 
        move_field(or_record.department, or_record.tmp)
        set_array(or_record.department)
        move_field(or_record.tmp, or_record.department.$append)
    end

    do list(path: or_record.department, var: c)

        if all_match(c, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append,
                c,
                -lang: nl
            )

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.type, "department")

        end

    end

# LIDO classification [type="collection"]

    unless is_array(or_record.collection) 
        move_field(or_record.collection, or_record.tmp)
        set_array(or_record.collection)
        move_field(or_record.tmp, or_record.collection.$append)
    end

    do list(path: or_record.collection, var: c)

        if all_match(c.term, '.*\S.*')

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "collection")

        else

            if all_match(c.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "collection")

            else

                if all_match(c.notes, '.*\S.*')

                    add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "collection")

                else

                    if all_match(c.source, '.*\S.*')

                        add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "collection")

                    else

                        if all_match('c.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append.type, "collection")

                        end

                    end

                end

            end

        end

        if all_match(c.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.term,
                -lang: nl
            )

        end

        if all_match(c.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.notes,
                -lang: fr
            )

        end

        if all_match(c.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.notes.0,
                -lang: fr
            )

        end

        if all_match(c.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                c.notes.1,
                -lang: en
            )

        end

        if all_match(c.source, '.*\S.*')

            copy_field(c.source, or_record.collection_source)

        end

        if all_match('c.term\.number', '.*\S.*')

            paste(or_record.collection_source, or_record.collection_source, 'c.term\.number', join_char:'')

        end

        if all_match(or_record.collection_source, '.*\S.*')

            copy_field(or_record.collection_source, descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.conceptID._)

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.conceptID.type, 'purl')

        end

        if all_match(c.source, 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.conceptID.source, 'AAT')

        end

        remove_field(or_record.collection_source)

    end


## LIDO objectIdentificationWrap

# LIDO titleSet

    unless is_array(or_record.title) 
        move_field(or_record.title, or_record.tmp)
        set_array(or_record.title)
        move_field(or_record.tmp, or_record.title.$append)
    end

    do list(path: or_record.title, var: c)

        if all_match(c.title, '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet.$append,
                c.title,
                -value_pref: preferred,
                -value_lang: nl
            )

        end

    end

    unless is_array(or_record.title_translation) 
        move_field(or_record.title_translation, or_record.tmp)
        set_array(or_record.title_translation)
        move_field(or_record.tmp, or_record.title_translation.$append)
    end

    do list(path: or_record.title_translation, var: c)

        if all_match('c.title\.translation', '.*\S.*')

            if all_match('c.title\.language', 'Frans')

                lido_basenameset(
                    descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet.$first,
                    'c.title\.translation',
                    -value_pref: preferred,
                    -value_lang: fr
                )

            else

                if all_match('c.title\.language', 'Engels')

                    lido_basenameset(
                        descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet.$first,
                        'c.title\.translation',
                        -value_pref: preferred,
                        -value_lang: en
                    )

                else

                    if all_match('c.title\.language', 'Duits')

                        lido_basenameset(
                            descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet.$first,
                            'c.title\.translation',
                            -value_pref: preferred,
                            -value_lang: de
                        )

                    else

                        lido_basenameset(
                            descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet.$first,
                            'c.title\.translation',
                            -value_pref: alternate
                        )

                    end

                end

            end

        end

    end

# LIDO inscriptions

    unless is_array(or_record.inscription)
        move_field(or_record.inscription, or_record.tmp)
        set_array(or_record.inscription)
        move_field(or_record.tmp, or_record.inscription.$append)
    end

    do list(path:or_record.inscription, var:c)

        if all_match('c.inscription\.content', '.*\S.*')

            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

        else

            if all_match('c.inscription\.type.term', '.*\S.*')

                add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

            else

                if all_match('c.inscription\.type.notes.0', '.*\S.*')

                    add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                else

                    if all_match('c.inscription\.type.notes', '.*\S.*')

                        add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                    else

                        if all_match('c.inscription\.type.source', '.*\S.*')

                            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                        else

                            if all_match('c.inscription\.type.term\.number', '.*\S.*')

                                add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                            else

                                if all_match('c.inscription\.position.term', '.*\S.*')

                                    add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                                else

                                    if all_match('c.inscription\.position.notes.0', '.*\S.*')

                                        add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                                    else

                                        if all_match('c.inscription\.position.notes', '.*\S.*')

                                            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$append)

                                        end

                                    end

                                end

                            end

                        end

                    end

                end

            end

        end

        if all_match('c.inscription\.content', '.*\S.*')

            copy_field('c.inscription\.content', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionTranscription._)
            copy_field('c.inscription\.content', or_record.inscription_content)

        end

        if all_match('c.inscription\.type.term', '.*\S.*')

            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'type')

        else

            if all_match('c.inscription\.type.notes.0', '.*\S.*')

                add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'type')

            else

                if all_match('c.inscription\.type.notes', '.*\S.*')

                    add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'type')

                else

                    if all_match('c.inscription\.type.source', '.*\S.*')

                        add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'type')

                    else

                        if all_match('c.inscription\.type.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'type')

                        end

                    end

                end

            end

        end

        if all_match('c.inscription\.type.term', '.*\S.*')

            copy_field('c.inscription\.type.term', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'nl')
            copy_field('c.inscription\.type.term', or_record.inscription_type)

        end

        if all_match('c.inscription\.type.notes', '.*\S.*')

            copy_field('c.inscription\.type.notes', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'fr')
            copy_field('c.inscription\.type.notes', or_record.inscription_type_fr)

        end

        if all_match('c.inscription\.type.notes.0', '.*\S.*')

            copy_field('c.inscription\.type.notes.0', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'fr')
            copy_field('c.inscription\.type.notes.0', or_record.inscription_type_fr)

        end

        if all_match('c.inscription\.type.notes.1', '.*\S.*')

            copy_field('c.inscription\.type.notes.1', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'en')
            copy_field('c.inscription\.type.notes.1', or_record.inscription_type_en)

        end

        if all_match('c.inscription\.type.source', '.*\S.*')

            copy_field('c.inscription\.type.source', or_record.inscription_type_source)

        end

        if all_match('c.inscription\.type.term\.number', '.*\S.*')

            paste(or_record.inscription_type_source, or_record.inscription_type_source, 'c.inscription\.type.term\.number', join_char:'')

        end

        if all_match(or_record.inscription_type_source, '.*\S.*')

            copy_field(or_record.inscription_type_source, descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteID._)

            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteID.type, 'purl')

        end

        if all_match('c.inscription\.type.source', 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteID.source, 'AAT')

        end

        remove_field(or_record.inscription_type_source)

        if all_match('c.inscription\.position.term', '.*\S.*')

            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'position')

        else

            if all_match('c.inscription\.position.notes.0', '.*\S.*')

                add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'position')

            else

                if all_match('c.inscription\.position.notes', '.*\S.*')

                    add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.type, 'position')

                end

            end

        end

        if all_match('c.inscription\.position.term', '.*\S.*')

            copy_field('c.inscription\.position.term', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'nl')
            copy_field('c.inscription\.position.term', or_record.inscription_position)

        end

        if all_match('c.inscription\.position.notes', '.*\S.*')

            copy_field('c.inscription\.position.notes', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'fr')
            copy_field('c.inscription\.position.notes', or_record.inscription_position_fr)

        end

        if all_match('c.inscription\.position.notes.0', '.*\S.*')

            copy_field('c.inscription\.position.notes.0', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'fr')
            copy_field('c.inscription\.position.notes.0', or_record.inscription_position_fr)

        end

        if all_match('c.inscription\.position.notes.1', '.*\S.*')

            copy_field('c.inscription\.position.notes.1', descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'en')
            copy_field('c.inscription\.position.notes.1', or_record.inscription_position_en)

        end

        if all_match(or_record.inscription_type, '.*\S.*')

            copy_field(or_record.inscription_type, or_record.inscription_display)

        end

        if all_match(or_record.inscription_position, '.*\S.*')

            if exists(or_record.inscription_display)

                paste(or_record.inscription_display, or_record.inscription_display, or_record.inscription_position, join_char:' ')

            else

                copy_field(or_record.inscription_position, or_record.inscription_display)

            end

        end

        if all_match(or_record.inscription_content, '.*\S.*')

            if exists(or_record.inscription_display)

                paste(or_record.inscription_display, or_record.inscription_display, or_record.inscription_content, join_char:': ')

            else

                copy_field(or_record.inscription_content, or_record.inscription_display)

            end

        end

        if all_match(or_record.inscription_display, '.*\S.*')

            copy_field(or_record.inscription_display, descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$append.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'nl')

        end

        remove_field(or_record.inscription_display)

        if all_match(or_record.inscription_type_fr, '.*\S.*')

            copy_field(or_record.inscription_type_fr, or_record.inscription_display)

        end

        if all_match(or_record.inscription_position_fr, '.*\S.*')

            if exists(or_record.inscription_display)

                paste(or_record.inscription_display, or_record.inscription_display, or_record.inscription_position_fr, join_char:' ')

            else

                copy_field(or_record.inscription_position_fr, or_record.inscription_display)

            end

        end

        if all_match(or_record.inscription_content, '.*\S.*')

            if exists(or_record.inscription_display)

                paste(or_record.inscription_display, or_record.inscription_display, or_record.inscription_content, join_char:': ')

            else

                copy_field(or_record.inscription_content, or_record.inscription_display)

            end

        end

        if all_match(or_record.inscription_display, '.*\S.*')

            copy_field(or_record.inscription_display, descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'fr')

        end

        remove_field(or_record.inscription_display)

        if all_match(or_record.inscription_type_en, '.*\S.*')

            copy_field(or_record.inscription_type_en, or_record.inscription_display)

        end

        if all_match(or_record.inscription_position_en, '.*\S.*')

            if exists(or_record.inscription_display)

                paste(or_record.inscription_display, or_record.inscription_display, or_record.inscription_position_en, join_char:' ')

            else

                copy_field(or_record.inscription_position_en, or_record.inscription_display)

            end

        end

        if all_match(or_record.inscription_content, '.*\S.*')

            if exists(or_record.inscription_display)

                paste(or_record.inscription_display, or_record.inscription_display, or_record.inscription_content, join_char:': ')

            else

                copy_field(or_record.inscription_content, or_record.inscription_display)

            end

        end

        if all_match(or_record.inscription_display, '.*\S.*')

            copy_field(or_record.inscription_display, descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$append._)
            add_field(descriptiveMetadata.objectIdentificationWrap.inscriptionsWrap.inscriptions.$last.inscriptionDescription.$last.descriptiveNoteValue.$last.lang, 'en')

        end

        remove_field(or_record.inscription_display)
        remove_field(or_record.inscription_content)
        remove_field(or_record.inscription_type)
        remove_field(or_record.inscription_position)
        remove_field(or_record.inscription_type_fr)
        remove_field(or_record.inscription_position_fr)
        remove_field(or_record.inscription_type_en)
        remove_field(or_record.inscription_position_en)

    end

# LIDO repositoryName

    unless is_array(or_record.institution) 
        move_field(or_record.institution, or_record.tmp)
        set_array(or_record.institution)
        move_field(or_record.tmp, or_record.institution.$append)
    end

    do list(path: or_record.institution, var: c)

        if all_match(c.name, '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.objectIdentificationWrap.repositoryWrap.repositorySet.$append.repositoryName.legalBodyName,
                c.name,
                -value_lang: nl
            )

        end

    end

# LIDO workID

    unless is_array(or_record.object_number)
        move_field(or_record.object_number, or_record.tmp)
        set_array(or_record.object_number)
        move_field(or_record.tmp, or_record.object_number.$append)
    end

    do list(path: or_record.object_number, var: c)

        if all_match(c, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.objectIdentificationWrap.repositoryWrap.repositorySet.$last.workID,
                c,
                -type: object-number
            )

        end

    end

# LIDO repositoryLocation

    unless is_array(or_record.current_location)
        move_field(or_record.current_location, or_record.tmp)
        set_array(or_record.current_location)
        move_field(or_record.tmp, or_record.current_location.$append)
    end

    do list(path: or_record.current_location, var: c)

        if all_match(c.current_location, '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.objectIdentificationWrap.repositoryWrap.repositorySet.$last.repositoryLocation.namePlaceSet.$append,
                c.current_location
            )

        end

    end

# LIDO objectDescriptionSet

    unless is_array(or_record.description) 
        move_field(or_record.description, or_record.tmp)
        set_array(or_record.description)
        move_field(or_record.tmp, or_record.description.$append)
    end

    set_field(or_record.count, '1')

    do list(path: or_record.description, var: c)

        if all_match(or_record.count, '1')

            if all_match(c.description, '.*\S.*')

                lido_descriptivenote(
                    descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
                    c.description,
                    -lang: nl
                )

            end

            set_field(or_record.count, '2')

        else

            if all_match(or_record.count, '2')

                if all_match(c.description, '.*\S.*')

                    lido_descriptivenote(
                        descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
                        c.description,
                        -lang: fr
                    )

                end

                set_field(or_record.count, '3')

            else

                if all_match(or_record.count, '3')

                    if all_match(c.description, '.*\S.*')

                        lido_descriptivenote(
                            descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
                            c.description,
                            -lang: en
                        )

                    end

                    remove_field(or_record.count)

                else

                    unless exists(or_record.count)

                        if all_match(c.description, '.*\S.*')

                            lido_descriptivenote(
                                descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
                                c.description
                            )

                        end

                    end

                end

            end

        end

    end

    if exists(or_record.count)

        remove_field(or_record.count)

    end

# LIDO objectMeasurementsWrap

    unless is_array(or_record.dimensions) 
        move_field(or_record.dimensions, or_record.tmp)
        set_array(or_record.dimensions)
        move_field(or_record.tmp, or_record.dimensions.$append)
    end

    do list(path:or_record.dimensions, var:c)

        add_field(descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$append)

        if all_match('c.dimension\.type', '.*\S.*')

            copy_field('c.dimension\.type', descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.measurementsSet.measurementType._)

        end

        if all_match('c.dimension\.unit', '.*\S.*')

            copy_field('c.dimension\.unit', descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.measurementsSet.measurementUnit._)

        end

        if all_match('c.dimension\.value', '.*\S.*')

            copy_field('c.dimension\.value', descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.measurementsSet.measurementValue._)

        end

        if all_match('c.dimension\.part', '.*\S.*')

            copy_field('c.dimension\.part', descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.extentMeasurements._)

            if all_match('c.dimension\.part', 'geheel')

                if all_match('c.dimension\.type', 'hoogte')

                    if all_match('c.dimension\.unit', '.*\S.*')

                        copy_field('c.dimension\.unit', or_record.dimension_height_unit)

                    end

                    if all_match('c.dimension\.value', '.*\S.*')

                        copy_field('c.dimension\.value', or_record.dimension_height_value)

                    end

                end

                if all_match('c.dimension\.type', 'breedte')

                    if all_match('c.dimension\.unit', '.*\S.*')

                        copy_field('c.dimension\.unit', or_record.dimension_width_unit)

                    end

                    if all_match('c.dimension\.value', '.*\S.*')

                        copy_field('c.dimension\.value', or_record.dimension_width_value)

                    end

                end

                if all_match('c.dimension\.type', 'diepte')

                    if all_match('c.dimension\.unit', '.*\S.*')

                        copy_field('c.dimension\.unit', or_record.dimension_depth_unit)

                    end

                    if all_match('c.dimension\.value', '.*\S.*')

                        copy_field('c.dimension\.value', or_record.dimension_depth_value)

                    end

                end

                if all_match('c.dimension\.type', 'diameter')

                    if all_match('c.dimension\.unit', '.*\S.*')

                        copy_field('c.dimension\.unit', or_record.dimension_diameter_unit)

                    end

                    if all_match('c.dimension\.value', '.*\S.*')

                        copy_field('c.dimension\.value', or_record.dimension_diameter_value)

                    end

                end

            end

        end

    end

    if all_match(or_record.dimension_height_value, '.*\S.*')

        copy_field(or_record.dimension_height_value, or_record.display_dimension)

        if all_match(or_record.dimension_height_unit, '.*\S.*')

            if all_match(or_record.dimension_width_unit, '.*\S.*')

                unless in(or_record.dimension_height_unit, or_record.dimension_width_unit)

                    set_field(or_record.dimension_height_unit_different, 'true')

                end

            end

            if all_match(or_record.dimension_depth_unit, '.*\S.*')

                unless in(or_record.dimension_height_unit, or_record.dimension_depth_unit)

                    set_field(or_record.dimension_height_unit_different, 'true')

                end

            end

            if all_match(or_record.dimension_width_value, '.*\S.*')

                if all_match(or_record.dimension_height_unit_different, 'true')

                    paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_height_unit, join_char:' ')

                end

            else

                if all_match(or_record.dimension_depth_value, '.*\S.*')

                    if all_match(or_record.dimension_height_unit_different, 'true')

                        paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_height_unit, join_char:' ')

                    end

                else

                    paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_height_unit, join_char:' ')

                end

            end

        end

    end

    if all_match(or_record.dimension_width_value, '.*\S.*')

        paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_width_value, join_char:' x ')

        if all_match(or_record.dimension_width_unit, '.*\S.*')

            if all_match(or_record.dimension_depth_unit, '.*\S.*')

                unless in(or_record.dimension_width_unit, or_record.dimension_depth_unit)

                    set_field(or_record.dimension_width_unit_different, 'true')

                end

            end

            if all_match(or_record.dimension_depth_value, '.*\S.*')

                if all_match(or_record.dimension_width_unit_different, 'true')

                    paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_width_unit, join_char:' ')

                end

            else

                paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_width_unit, join_char:' ')

            end

        end

    end

    if all_match(or_record.dimension_depth_value, '.*\S.*')

        paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_depth_value, join_char:' x ')

        if all_match(or_record.dimension_depth_unit, '.*\S.*')

            paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_depth_unit, join_char:' ')

        end

    end

    unless exists(or_record.display_dimension)

        if all_match(or_record.dimension_diameter_value, '.*\S.*')

            copy_field(or_record.dimension_diameter_value, or_record.display_dimension)

            if all_match(or_record.dimension_diameter_unit, '.*\S.*')

                paste(or_record.display_dimension, or_record.display_dimension, or_record.dimension_diameter_unit, join_char:' ')

            end

            append(or_record.display_dimension, ' (diameter)')

        end

    end

    if all_match(or_record.display_dimension, '.*\S.*')

        add_field(descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$append)

        copy_field(or_record.display_dimension, descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.displayObjectMeasurements._)

    end

    remove_field(or_record.dimension_height_unit)
    remove_field(or_record.dimension_height_value)
    remove_field(or_record.dimension_height_unit_different)
    remove_field(or_record.dimension_width_unit)
    remove_field(or_record.dimension_width_value)
    remove_field(or_record.dimension_width_unit_different)
    remove_field(or_record.dimension_depth_unit)
    remove_field(or_record.dimension_depth_value)
    remove_field(or_record.dimension_diameter_unit)
    remove_field(or_record.dimension_diameter_value)
    remove_field(or_record.display_dimension)


## LIDO eventWrap

# LIDO eventType [eventType/term="acquisition"]

#    add_field(or_record.event_type, "acquisition")

#    lido_term(
#        descriptiveMetadata.eventWrap.eventSet.$append.event.eventType,
#        or_record.event_type
#    )

# LIDO eventActor [eventType/term="acquisition"]

#    unless is_array(or_record.acquisition_source)
#        move_field(or_record.acquisition_source, or_record.tmp)
#        set_array(or_record.acquisition_source)
#        move_field(or_record.tmp, or_record.acquisition_source.$append)
#    end

#    do list (path:or_record.acquisition_source, var:c)

#        if all_match('c.acquisition\.source', '.*\S.*')

#            lido_basenameset(
#                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$append.actorInRole.actor.nameActorSet,
#                'c.acquisition\.source'
#            )

#        end

#    end

# LIDO displayDate [eventType/term="acquisition"]

#    unless is_array(or_record.acquisition_date)
#        move_field(or_record.acquisition_date, or_record.tmp)
#        set_array(or_record.acquisition_date)
#        move_field(or_record.tmp, or_record.acquisition_date.$append)
#    end

#    do list (path:or_record.acquisition_date, var:c)

#        if all_match(c, '.*\S.*')

#            lido_basevalue(
#                descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.displayDate,
#                c
#            )

#        end

#    end

# LIDO eventMethod [eventType/term="acquisition"]

#    unless is_array(or_record.acquisition_method)
#        move_field(or_record.acquisition_method, or_record.tmp)
#        set_array(or_record.acquisition_method)
#        move_field(or_record.tmp, or_record.acquisition_method.$append)
#    end

#    unless is_array(or_record.acquisition_method_id)
#        move_field(or_record.acquisition_method_id, or_record.tmp)
#        set_array(or_record.acquisition_method_id)
#        move_field(or_record.tmp, or_record.acquisition_method_id.$append)
#    end

#    do list (path: or_record.acquisition_method_id, var: c)
#        copy_field(c, or_record.acquisition_method.$append.id)
#    end

#    assoc(or_record.acquisition_m, or_record.acquisition_method.*.id, or_record.acquisition_method.*)

    # We'll have multiple terms: the corresponding value in AAT (type:alternate) and the value from Adlib (type:preferred)

#    do each (path:or_record.acquisition_m, var:c)

        # Value in Adlib

#        if all_match(c.value, '.*\S.*')

#            if all_match(c.key, '.*\S.*')

#                lido_term(
#                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMethod.$append,
#                    c.value,
#                    -conceptid: c.key,
#                    -type: local,
#                    -source: Adlib,
#                    -pref: preferred,
#                    -lang: nl
#                )

#            else

#                lido_term(
#                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMethod.$append,
#                    c.value,
#                    -pref: preferred,
#                    -lang: nl
#                )

#            end

#        end

        # Corresponding value in AAT, not (yet) retrievable via API

#        copy_field(c.value, c.acquisition_aat)

#        lookup_in_store(c.acquisition_aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

#        if all_match(c.acquisition_aat.aatterm, '.*\S.*')

#            if all_match(c.acquisition_aat.aaturi, '.*\S.*')

#                lido_term(
#                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMethod.$last,
#                    c.acquisition_aat.aatterm,
#                    -conceptid: c.acquisition_aat.aaturi,
#                    -type: purl,
#                    -source: AAT,
#                    -pref: alternate,
#                    -lang: nl
#                )

#            else

#                lido_term(
#                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMethod.$last,
#                    c.acquisition_aat.aatterm,
#                    -pref: alternate,
#                    -lang: nl
#                )

#            end

#        end

#    end

# LIDO eventType [eventType/term="production"]

    add_field(or_record.event_type, "production")
    
    lido_term(
        descriptiveMetadata.eventWrap.eventSet.$append.event.eventType,
        or_record.event_type
    )

# LIDO eventActor [eventType/term="production"]

    unless is_array(or_record.production) 
        move_field(or_record.production, or_record.tmp)
        set_array(or_record.production)
        move_field(or_record.tmp, or_record.production.$append)
    end

    do list (path: or_record.production, var: c)

        trim('c.creator\.qualifier')

        if all_match(c.creator.name, '.*\S.*')

            lido_actor(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$append,
                'c.creator\.lref',
                c.creator.name,
                -name_lang: nl,
                -id_source: Adlib,
                -id_type: local,
                -name_pref: preferred
            )

            if all_match('c.creator.birth\.date\.start', '.*\S.*')

                if all_match('c.creator.birth\.date\.end', '.*\S.*')
                    copy_field('c.creator.birth\.date\.start', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$append.earliestDate._)
                    copy_field('c.creator.birth\.date\.end', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.latestDate._)
                else
                    copy_field('c.creator.birth\.date\.start', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$append.earliestDate._)
                end

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.type, 'birth-date')

                if all_match('c.creator.birth\.date\.precision', '.*\S.*')
                    copy_field('c.creator.birth\.date\.precision', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.earliestDate.type)
                end

            else

                if all_match('c.creator.birth\.date\.end', '.*\S.*')
                    copy_field('c.creator.birth\.date\.end', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$append.earliestDate._)
                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.type, 'birth-date')
                end

                if all_match('c.creator.birth\.date\.precision', '.*\S.*')
                    copy_field('c.creator.birth\.date\.precision', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.earliestDate.type)
                end

            end

            if all_match('c.creator.death\.date\.start', '.*\S.*')

                if all_match('c.creator.death\.date\.end', '.*\S.*')
                    copy_field('c.creator.death\.date\.start', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$append.earliestDate._)
                    copy_field('c.creator.death\.date\.end', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.latestDate._)
                else
                    copy_field('c.creator.death\.date\.start', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$append.earliestDate._)
                end

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.type, 'death-date')

                if all_match('c.creator.death\.date\.precision', '.*\S.*')
                    copy_field('c.creator.death\.date\.precision', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.earliestDate.type)
                end

            else

                if all_match('c.creator.death\.date\.end', '.*\S.*')
                    copy_field('c.creator.death\.date\.end', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$append.earliestDate._)
                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.type, 'death-date')
                end

                if all_match('c.creator.death\.date\.precision', '.*\S.*')
                    copy_field('c.creator.death\.date\.precision', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalDatesActor.$last.earliestDate.type)
                end

            end

            if all_match('c.creator.birth\.place.term', '.*\S.*')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "birth-place")

            else

                if all_match('c.creator.birth\.place.notes.0', '.*\S.*')

                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "birth-place")

                else

                    if all_match('c.creator.birth\.place.notes', '.*\S.*')

                        add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "birth-place")

                    else

                        if all_match('c.creator.birth\.place.source', '.*\S.*')

                            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "birth-place")

                        else

                            if all_match('c.creator.birth\.place.term\.number', '.*\S.*')

                                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "birth-place")

                            end

                        end

                    end

                end

            end

            if all_match('c.creator.birth\.place.term', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.birth\.place.term',
                    -value_lang: nl
                )

            end

            if all_match('c.creator.birth\.place.notes', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.birth\.place.notes',
                    -value_lang: fr
                )

            end

            if all_match('c.creator.birth\.place.notes.0', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.birth\.place.notes.0',
                    -value_lang: fr
                )

            end

            if all_match('c.creator.birth\.place.notes.1', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.birth\.place.notes.1',
                    -value_lang: en
                )

            end

            if all_match('c.creator.birth\.place.source', '.*\S.*')

                copy_field('c.creator.birth\.place.source', or_record.birth_place_source)

            end

            if all_match('c.creator.birth\.place.term\.number', '.*\S.*')

                paste(or_record.birth_place_source, or_record.birth_place_source, 'c.creator.birth\.place.term\.number', join_char:'')

            end

            if all_match(or_record.birth_place_source, '.*\S.*')

                lido_baseid(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.placeID,
                    or_record.birth_place_source,
                    -type: purl
                )

            end

            if all_match('c.creator.birth\.place.source', 'http://vocab.getty.edu/page/tgn/')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.placeID.$last.source, 'TGN')

            end

            remove_field(or_record.birth_place_source)

            if all_match('c.creator.death\.place.term', '.*\S.*')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "death-place")

            else

                if all_match('c.creator.death\.place.notes.0', '.*\S.*')

                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "death-place")

                else

                    if all_match('c.creator.death\.place.notes', '.*\S.*')

                        add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "death-place")

                    else

                        if all_match('c.creator.death\.place.source', '.*\S.*')

                            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "death-place")

                        else

                            if all_match('c.creator.death\.place.term\.number', '.*\S.*')

                                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$append.type, "death-place")

                            end

                        end

                    end

                end

            end

            if all_match('c.creator.death\.place.term', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.death\.place.term',
                    -value_lang: nl
                )

            end

            if all_match('c.creator.death\.place.notes', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.death\.place.notes',
                    -value_lang: fr
                )

            end

            if all_match('c.creator.death\.place.notes.0', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.death\.place.notes.0',
                    -value_lang: fr
                )

            end

            if all_match('c.creator.death\.place.notes.1', '.*\S.*')

                lido_basenameset(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.namePlaceSet,
                    'c.creator.death\.place.notes.1',
                    -value_lang: en
                )

            end

            if all_match('c.creator.death\.place.source', '.*\S.*')

                copy_field('c.creator.death\.place.source', or_record.death_place_source)

            end

            if all_match('c.creator.death\.place.term\.number', '.*\S.*')

                paste(or_record.death_place_source, or_record.death_place_source, 'c.creator.death\.place.term\.number', join_char:'')

            end

            if all_match(or_record.death_place_source, '.*\S.*')

                lido_baseid(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.placeID,
                    or_record.death_place_source,
                    -type: purl
                )

            end

            if all_match('c.creator.death\.place.source', 'http://vocab.getty.edu/page/tgn/')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.vitalPlaceActor.$last.placeID.$last.source, 'TGN')

            end

            remove_field(or_record.death_place_source)

            if all_match('c.creator\.qualifier', '.*\S.*')
                copy_field('c.creator\.qualifier', descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.attributionQualifierActor._)
            end

        end

        # Role. Work around. -role switch in lido_actor does not work correctly.

        if all_match('c.creator\.role.term', '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor,
                'c.creator\.role.term',
                -lang: nl
            )

        end

        if all_match('c.creator\.role.notes', '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor,
                'c.creator\.role.notes',
                -lang: fr
            )

        end

        if all_match('c.creator\.role.notes.0', '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor,
                'c.creator\.role.notes.0',
                -lang: fr
            )

        end

        if all_match('c.creator\.role.notes.1', '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor,
                'c.creator\.role.notes.1',
                -lang: en
            )

        end

        if all_match('c.creator\.role.source', '.*\S.*')

            copy_field('c.creator\.role.source', or_record.creator_role_source)

        end

        if all_match('c.creator\.role.term\.number', '.*\S.*')

            paste(or_record.creator_role_source, or_record.creator_role_source, 'c.creator\.role.term\.number', join_char:'')

        end

        if all_match(or_record.creator_role_source, '.*\S.*')

            copy_field(or_record.creator_role_source, descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor.conceptID._)

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor.conceptID.type, 'purl')

        end

        if all_match('c.creator\.role.source', 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.roleActor.conceptID.source, 'AAT')

        end

        remove_field(or_record.creator_role_source)

        # Add Persistent URI data to actor, if not available from API, use Persistent URI's from Flemish Art Collection concordance database

        copy_field(c.creator.name, c.creator_pid)

        downcase(c.creator_pid)

        lookup_in_store(c.creator_pid, DBI, data_source: "dbi:SQLite:/tmp/import.CREATORS_UTF8.sqlite")

        # Preferred label from Flemish Art Collection concordance database

        if all_match(c.creator_pid._id, '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.nameActorSet.$last,
                c.creator_pid.display_name,
                -value_pref: alternate
            )

        end

        # Creator Persistent URI's

        copy_field(c.creator.Source, c.creator_source)

        unless is_array(c.creator_source)
            move_field(c.creator_source, or_record.tmp)
            set_array(c.creator_source)
            move_field(or_record.tmp, c.creator_source.$append)
        end

        do list (path: c.creator_source, var: s)

            if all_match(s.source, 'VIAF')

                if all_match('s.source\.number', '.*\S.*')

                    set_field(c.creator_source_viaf, 'https://viaf.org/viaf/')

                    paste(c.creator_viaf, c.creator_source_viaf, 's.source\.number', join_char:'')

                    lido_baseid(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID,
                        c.creator_viaf,
                        -source: VIAF,
                        -type: purl
                    )

                    set_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID.$last.pref, 'preferred')

                end

            end

            if all_match(s.source, 'RKDartists&')

                if all_match('s.source\.number', '.*\S.*')

                    set_field(c.creator_source_rkd, 'https://rkd.nl/explore/artists/')

                    paste(c.creator_rkd, c.creator_source_rkd, 's.source\.number', join_char:'')

                    lido_baseid(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID,
                        c.creator_rkd,
                        -source: RKD,
                        -type: purl
                    )

                    set_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID.$last.pref, 'preferred')

                end

            end

            if all_match(s.source, 'Wikidata')

                if all_match('s.source\.number', '.*\S.*')

                    set_field(c.creator_source_wikidata, 'https://www.wikidata.org/wiki/')

                    paste(c.creator_wikidata, c.creator_source_wikidata, 's.source\.number', join_char:'')

                    lido_baseid(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID,
                        c.creator_wikidata,
                        -source: Wikidata,
                        -type: purl
                    )

                    set_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID.$last.pref, 'preferred')

                end

            end

        end

        unless in(c.creator_viaf, c.creator_pid.viaf_uri)

            if all_match(c.creator_pid.viaf_uri, '.*\S.*')

                lido_baseid(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID,
                    c.creator_pid.viaf_uri,
                    -source: VIAF,
                    -type: purl
                )

                set_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID.$last.pref, 'alternate')

            end

        end

        unless in(c.creator_rkd, c.creator_pid.rkd_uri)

            if all_match(c.creator_pid.rkd_uri, '.*\S.*')

                lido_baseid(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID,
                    c.creator_pid.rkd_uri,
                    -source: RKD,
                    -type: purl
                )

                set_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID.$last.pref, 'alternate')

            end

        end

        unless in(c.creator_wikidata, c.creator_pid.wikidata_uri)

            if all_match(c.creator_pid.wikidata_uri, '.*\S.*')

                lido_baseid(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID,
                    c.creator_pid.wikidata_uri,
                    -source: Wikidata,
                    -type: purl
                )

                set_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$last.actorInRole.actor.actorID.$last.pref, 'alternate')

            end

        end

    end

# LIDO displayDate [eventType/term="production"]

    unless is_array(or_record.production_date) 
        move_field(or_record.production_date, or_record.tmp)
        set_array(or_record.production_date)
        move_field(or_record.tmp, or_record.production_date.$append)
    end

    do list(path:or_record.production_date, var:d)

        if all_match('d.production\.date\.start', '.*\S.*')

            if all_match('d.production\.date\.end', '.*\S.*')

                if in('d.production\.date\.start', 'd.production\.date\.end')

                    copy_field('d.production\.date\.start', or_record.displayDate)

                else

                    if all_match('d.production\.date\.end\.prec', '.*\S.*')

                        paste(or_record.date_end, 'd.production\.date\.end\.prec', 'd.production\.date\.end')

                        paste(or_record.displayDate, 'd.production\.date\.start', or_record.date_end, join_char:' - ')

                    else

                        paste(or_record.displayDate, 'd.production\.date\.start', 'd.production\.date\.end', join_char:' - ')

                    end

                end

            else

                copy_field('d.production\.date\.start', or_record.displayDate)

            end

            if all_match('d.production\.date\.start\.prec', '.*\S.*')

                paste(or_record.displayDate, 'd.production\.date\.start\.prec', or_record.displayDate)

            end

        else

            if all_match('d.production\.date\.end', '.*\S.*')

                copy_field('d.production\.date\.end', or_record.displayDate)

                if all_match('d.production\.date\.end\.prec', '.*\S.*')

                    paste(or_record.displayDate, 'd.production\.date\.end\.prec', or_record.displayDate)

                end

            else

                add_field(or_record.displayDate, "incorrect date format")

            end

        end

        unless all_match(or_record.displayDate, "incorrect date format")

            lido_basevalue(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.displayDate,
                or_record.displayDate
            )

        end

    end

# LIDO date [eventType/term="production"]

    set_array(or_record.earliest_dates)
    set_array(or_record.latest_dates)

    do list(path:or_record.production_date, var:d)

        if all_match('d.production\.date\.start', '.*\S.*')

            prepend('d.production\.date\.start', '#date#')

            if all_match('d.production\.date\.start\.prec', '.*\S.*')

                prepend('d.production\.date\.start\.prec', '#prec#')
                paste('d.production\.date\.start','d.production\.date\.start','d.production\.date\.start\.prec',join_char:"")

            end

            move_field('d.production\.date\.start', or_record.earliest_dates.$append)

        end

        if all_match('d.production\.date\.end', '.*\S.*')

            prepend('d.production\.date\.end', '#date#')

            if all_match('d.production\.date\.end\.prec', '.*\S.*')

                prepend('d.production\.date\.end\.prec', '#prec#')
                paste('d.production\.date\.end','d.production\.date\.end','d.production\.date\.end\.prec',join_char:"")

            end

            move_field('d.production\.date\.end', or_record.latest_dates.$append)

        end

    end

    if all_match(or_record.earliest_dates.0, '.*\S.*')

        sort_field(or_record.earliest_dates)
        if any_match(or_record.earliest_dates.0, '#date#(.*)#prec#(.*)')
            parse_text(or_record.earliest_dates.0, '#date#(.*)#prec#(.*)')
        else
            if any_match(or_record.earliest_dates.0, '#date#(.*)')
                parse_text(or_record.earliest_dates.0, '#date#(.*)')
            end
        end

    end

    if all_match(or_record.latest_dates.0, '.*\S.*')

        sort_field(or_record.latest_dates, reverse:1)
        if any_match(or_record.latest_dates.0, '#date#(.*)#prec#(.*)')
            parse_text(or_record.latest_dates.0, '#date#(.*)#prec#(.*)')
        else
            if any_match(or_record.latest_dates.0, '#date#(.*)')
                parse_text(or_record.latest_dates.0, '#date#(.*)')
            end
        end

    end

    if all_match(or_record.earliest_dates.0.0, '.*\S.*')

        if all_match(or_record.earliest_dates.0.1, '.*\S.*')

            if all_match(or_record.latest_dates.0.0, '.*\S.*')

                if all_match(or_record.latest_dates.0.1, '.*\S.*')

                    lido_date(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                        -earliest_date: or_record.earliest_dates.0.0,
                        -earliest_date_type: or_record.earliest_dates.0.1,
                        -latest_date: or_record.latest_dates.0.0,
                        -latest_date_type: or_record.latest_dates.0.1
                    )

                else

                    lido_date(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                        -earliest_date: or_record.earliest_dates.0.0,
                        -earliest_date_type: or_record.earliest_dates.0.1,
                        -latest_date: or_record.latest_dates.0.0
                    )

                end

            else

                lido_date(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                    -earliest_date: or_record.earliest_dates.0.0,
                    -earliest_date_type: or_record.earliest_dates.0.1
                )

            end

        else

            if all_match(or_record.latest_dates.0.0, '.*\S.*')

                if all_match(or_record.latest_dates.0.1, '.*\S.*')

                    lido_date(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                        -earliest_date: or_record.earliest_dates.0.0,
                        -latest_date: or_record.latest_dates.0.0,
                        -latest_date_type: or_record.latest_dates.0.1
                    )

                else

                    lido_date(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                        -earliest_date: or_record.earliest_dates.0.0,
                        -latest_date: or_record.latest_dates.0.0
                    )

                end

            else

                lido_date(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                    -earliest_date: or_record.earliest_dates.0.0,
                )

            end

        end

    else

        if all_match(or_record.latest_dates.0.0, '.*\S.*')

            if all_match(or_record.latest_dates.0.1, '.*\S.*')

                lido_date(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                    -latest_date: or_record.latest_dates.0.0,
                    -latest_date_type: or_record.latest_dates.0.1
                )

            else

                lido_date(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                    -latest_date: or_record.latest_dates.0.0
                )

            end

        else

            if all_match('d.production\.date\.start\.prec', '.*\S.*')

                copy_field('d.production\.date\.start\.prec', descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date.earliestDate.type)

            end

            if all_match('d.production\.date\.end\.prec', '.*\S.*')

                copy_field('d.production\.date\.end\.prec', descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date.latestDate.type)

            end

        end

    end

# LIDO periodName [eventType/term="production"]

    unless is_array(or_record.production_period) 
        move_field(or_record.production_period, or_record.tmp)
        set_array(or_record.production_period)
        move_field(or_record.tmp, or_record.production_period.$append)
    end

    do list(path: or_record.production_period, var: c)

        if all_match(c.term, '.*\S.*')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append)

        else

            if all_match(c.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append)

            else

                if all_match(c.notes, '.*\S.*')

                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append)

                end

            end

        end

        if all_match(c.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.term,
                -lang: nl
            )

        end

        if all_match(c.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.notes,
                -lang: fr
            )

        end

        if all_match(c.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.notes.0,
                -lang: fr
            )

        end

        if all_match(c.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.notes.1,
                -lang: en
            )

        end

    end

    # School/style

    unless is_array(or_record.style)
        move_field(or_record.style, or_record.tmp)
        set_array(or_record.style)
        move_field(or_record.tmp, or_record.style.$append)
    end

    do list(path: or_record.style, var: c)

        if all_match(c.term, '.*\S.*')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append.type, "style")

        else

            if all_match(c.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append.type, "style")

            else

                if all_match(c.notes, '.*\S.*')

                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append.type, "style")

                else

                    if all_match(c.source, '.*\S.*')

                        add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append.type, "style")

                    else

                        if all_match('c.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$append.type, "style")

                        end

                    end

                end

            end

        end

        if all_match(c.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.term,
                -lang: nl
            )

        end

        if all_match(c.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.notes,
                -lang: fr
            )

        end

        if all_match(c.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.notes.0,
                -lang: fr
            )

        end

        if all_match(c.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last,
                c.notes.1,
                -lang: en
            )

        end

        if all_match(c.source, '.*\S.*')

            copy_field(c.source, or_record.style_source)

        end

        if all_match('c.term\.number', '.*\S.*')

            paste(or_record.style_source, or_record.style_source, 'c.term\.number', join_char:'')

        end

        if all_match(or_record.style_source, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last.conceptID,
                or_record.style_source,
                -type: purl
            )

        end

        if all_match(c.source, 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.periodName.$last.conceptID.$last.source, 'AAT')

        end

        remove_field(or_record.style_source)

    end

# LIDO namePlaceSet [eventType/term="production"]

    unless is_array(or_record.production)
        move_field(or_record.production, or_record.tmp)
        set_array(or_record.production)
        move_field(or_record.tmp, or_record.production.$append)
    end

    do list (path: or_record.production, var: c)

        if all_match('c.production\.place', '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventPlace.$append.place.namePlaceSet,
                'c.production\.place',
                -value_pref: preferred,
                -value_lang: nl
            )

        end

        if all_match('c.production\.place\.lref', '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventPlace.$last.place.placeID,
                'c.production\.place\.lref',
                -type: local,
                -source: Adlib
            )

        end

    end

# LIDO termMaterialsTech [eventType/term="production"]

    # Materials

    unless is_array(or_record.materials) 
        move_field(or_record.materials, or_record.tmp)
        set_array(or_record.materials)
        move_field(or_record.tmp, or_record.materials.$append)
    end

    # We'll have multiple terms: the corresponding value in AAT from Flemish Art Collection concordance database (type:alternate) and the value from Adlib (type:preferred)

    do list(path: or_record.materials, var: c)

        # Value in Adlib

        if all_match(c.material.term, '.*\S.*')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'material')

        else

            if all_match(c.material.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'material')

            else

                if all_match(c.material.notes, '.*\S.*')

                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'material')

                else

                    if all_match(c.material.source, '.*\S.*')

                        add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'material')

                    else

                        if all_match('c.material.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'material')

                        end

                    end

                end

            end

        end

        if all_match(c.material.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.material.term,
                -pref: preferred,
                -lang: nl
            )

        end

        if all_match(c.material.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.material.notes,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.material.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.material.notes.0,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.material.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.material.notes.1,
                -pref: preferred,
                -lang: en
            )

        end

        if all_match(c.material.source, '.*\S.*')

            copy_field(c.material.source, or_record.material_source)

        end

        if all_match('c.material.term\.number', '.*\S.*')

            paste(or_record.material_source, or_record.material_source, 'c.material.term\.number', join_char:'')

        end

        if all_match(or_record.material_source, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last.conceptID,
                or_record.material_source,
                -type: purl,
                -pref: preferred
            )

        end

        if all_match(c.material.source, 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last.conceptID.$last.source, 'AAT')

        end

        remove_field(or_record.material_source)

        # Corresponding value in AAT from Flemish Art Collection concordance database

        if all_match(c.material.term, '.*\S.*')

            copy_field(c.material.term, c.material_aat)

            lookup_in_store(c.material_aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

            if all_match(c.material_aat.aatterm, '.*\S.*')

                if all_match(c.material_aat.aaturi, '.*\S.*')

                    lido_term(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                        c.material_aat.aatterm,
                        -conceptid: c.material_aat.aaturi,
                        -type: purl,
                        -source: AAT,
                        -pref: alternate,
                        -lang: nl
                    )

                else

                    lido_term(
                        descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                        c.material_aat.aatterm,
                        -pref: alternate,
                        -lang: nl
                    )

                end

            end

        end

    end

    # Techniques

    unless is_array(or_record.technique)
        move_field(or_record.technique, or_record.tmp)
        set_array(or_record.technique)
        move_field(or_record.tmp, or_record.technique.$append)
    end

    do list(path: or_record.technique, var: c)

        if all_match(c.technique.term, '.*\S.*')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'technique')

        else

            if all_match(c.technique.notes.0, '.*\S.*')

                add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'technique')

            else

                if all_match(c.technique.notes, '.*\S.*')

                    add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'technique')

                else

                    if all_match(c.technique.source, '.*\S.*')

                        add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'technique')

                    else

                        if all_match('c.technique.term\.number', '.*\S.*')

                            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append.type, 'technique')

                        end

                    end

                end

            end

        end

        if all_match(c.technique.term, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.technique.term,
                -pref: preferred,
                -lang: nl
            )

        end

        if all_match(c.technique.notes, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.technique.notes,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.technique.notes.0, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.technique.notes.0,
                -pref: preferred,
                -lang: fr
            )

        end

        if all_match(c.technique.notes.1, '.*\S.*')

            lido_term(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                c.technique.notes.1,
                -pref: preferred,
                -lang: en
            )

        end

        if all_match(c.technique.source, '.*\S.*')

            copy_field(c.technique.source, or_record.technique_source)

        end

        if all_match('c.technique.term\.number', '.*\S.*')

            paste(or_record.technique_source, or_record.technique_source, 'c.technique.term\.number', join_char:'')

        end

        if all_match(or_record.technique_source, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last.conceptID,
                or_record.technique_source,
                -type: purl,
                -pref: preferred
            )

        end

        if all_match(c.technique.source, 'http://vocab.getty.edu/page/aat/')

            add_field(descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last.conceptID.$last.source, 'AAT')

        end

        remove_field(or_record.technique_source)

    end

# LIDO displayMaterialsTech [eventType/term="production"]

    unless is_array(or_record.physical_description)
        move_field(or_record.physical_description, or_record.tmp)
        set_array(or_record.physical_description)
        move_field(or_record.tmp, or_record.physical_description.$append)
    end
    
    do list(path: or_record.physical_description, var: c)

        if all_match(c, '.*\S.*')

            lido_basevalue(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.displayMaterialsTech,
                c
            )

        end

    end


## LIDO objectRelationWrap

# LIDO subjectConcept / subjectEvent / subjectPlace

    # Content motif general / Iconclass

    unless is_array(or_record.content_motif_general)
        move_field(or_record.content_motif_general, or_record.tmp)
        set_array(or_record.content_motif_general)
        move_field(or_record.tmp, or_record.content_motif_general.$append)
    end

    unless is_array(or_record.content_motif_general_id)
        move_field(or_record.content_motif_general_id, or_record.tmp)
        set_array(or_record.content_motif_general_id)
        move_field(or_record.tmp, or_record.content_motif_general_id.$append)
    end

    do list(path:or_record.content_motif_general, var: i)

        if all_match(i.source, 'http://iconclass.org/')

            if all_match('i.term\.code', '.*\S.*')

                paste(or_record.iconclassId, i.source, 'i.term\.code', join_char:'')

                lido_term(
                    descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectConcept.$append,
                    i.term,
                    -conceptid: or_record.iconclassId,
                    -type: purl,
                    -source: Iconclass,
                    -lang: nl
                )

                remove_field(or_record.iconclassId)
                remove_field(or_record.content_motif_general_id.$first)

                # English term

                copy_field('i.term\.code', i.english_term)

                lookup_in_store(i.english_term, DBI, data_source: "dbi:SQLite:/tmp/import.iconclass.sqlite")

                unless all_match(i.english_term.t, '.*\S.*')

                    if all_match(i.english_term, '^\d(?:\d(?:([A-Z])(?:\1)?\d*)?)?\([^\+][^\)]*\)\d*(?:\(\+\d+\))?.*')

                        replace_all(i.english_term, '^(\d(?:\d(?:([A-Z])(?:\2)?\d*)?)?\()[^\+][^\)]*(\)\d*(?:\(\+\d+\))?.*)', '$1...$3')

                        lookup_in_store(i.english_term, DBI, data_source: "dbi:SQLite:/tmp/import.iconclass.sqlite")

                        if all_match(i.english_term.t, '.*\(with [^\(]*[A-Z][A-Z]+[^\(]*\).*')

                            replace_all('i.term\.code', '^\d(?:\d(?:([A-Z])(?:\1)?\d*)?)?\(([^\+][^\)]*)\)\d*(?:\(\+\d+\))?.*', '$2')
                            paste(i.english_term.t, 'i.term\.code', i.english_term.t, join_char:'##KEYWORD##')
                            replace_all(i.english_term.t, '(.*)##KEYWORD##(.*)\(with [^\(]*[A-Z][A-Z]+[^\(]*\)(.*)', '$1##KEYWORD##$2\($1\)$3')
                            replace_all(i.english_term.t, '(.*)##KEYWORD##(.*)\(with [^\(]*[A-Z][A-Z]+[^\(]*\)(.*)', '$1##KEYWORD##$2\($1\)$3')
                            replace_all(i.english_term.t, '.*##KEYWORD##(.*)', '$1')

                        end

                    end

                end

                if all_match(i.english_term.t, '.*\S.*')

                    lido_term(
                        descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectConcept.$last,
                        i.english_term.t,
                        -lang: en
                    )

                end

            end

        else

            move_field(i.term, or_record.term_array.$append)

            copy_field(or_record.content_motif_general_id.$first, or_record.term_array.$append.id)

            assoc(or_record.general_motif, or_record.term_array.*.id, or_record.term_array.*)

            # We'll have multiple terms for the type "content-motif-general": the corresponding value in AAT (type:alternate) and the value from Adlib (type:preferred)

            do each(path:or_record.general_motif, var:c)

                # Value in Adlib

                if all_match(c.value, '.*\S.*')

                    add_field(descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.type, "content-motif-general")

                    if all_match(c.key, '.*\S.*')

                        lido_term(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectConcept.$append,
                            c.value,
                            -conceptid: c.key,
                            -type: local,
                            -source: Adlib,
                            -pref: preferred,
                            -lang: nl
                        )

                    else

                        lido_term(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectConcept.$append,
                            c.value,
                            -pref: preferred,
                            -lang: nl
                        )

                    end

                end

                # Corresponding value in AAT, not (yet) retrievable via API

                copy_field(c.value, c.general_motif_aat)

                lookup_in_store(c.general_motif_aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

                if all_match(c.general_motif_aat.aatterm, '.*\S.*')

                    if all_match(c.general_motif_aat.aaturi, '.*\S.*')

                        lido_term(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectConcept.$last,
                            c.general_motif_aat.aatterm,
                            -conceptid: c.general_motif_aat.aaturi,
                            -type: purl,
                            -source: AAT,
                            -pref: alternate,
                            -lang: nl
                        )

                    else

                        lido_term(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectConcept.$last,
                            c.general_motif_aat.aatterm,
                            -pref: alternate,
                            -lang: nl
                        )

                    end

                end

            end

            remove_field(or_record.term_array)
            remove_field(or_record.content_motif_general_id.$first)

        end

    end

    # Content motif specific / Iconclass

    unless is_array(or_record.content_motif_specific)
        move_field(or_record.content_motif_specific, or_record.tmp)
        set_array(or_record.content_motif_specific)
        move_field(or_record.tmp, or_record.content_motif_specific.$append)
    end

    do list(path:or_record.content_motif_specific, var: c)

        if all_match(c.source, 'http://iconclass.org/')

            if all_match('c.term\.code', '.*\S.*')

                paste(or_record.iconclassId, c.source, 'c.term\.code', join_char:'')

                lido_term(
                    descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectConcept.$append,
                    c.term,
                    -conceptid: or_record.iconclassId,
                    -type: purl,
                    -source: Iconclass,
                    -lang: nl
                )

                remove_field(or_record.iconclassId)

                # English term

                copy_field('c.term\.code', c.english_term)

                lookup_in_store(c.english_term, DBI, data_source: "dbi:SQLite:/tmp/import.iconclass.sqlite")

                unless all_match(c.english_term.t, '.*\S.*')

                    if all_match(c.english_term, '^\d(?:\d(?:([A-Z])(?:\1)?\d*)?)?\([^\+][^\)]*\)\d*(?:\(\+\d+\))?.*')

                        replace_all(c.english_term, '^(\d(?:\d(?:([A-Z])(?:\2)?\d*)?)?\()[^\+][^\)]*(\)\d*(?:\(\+\d+\))?.*)', '$1...$3')

                        lookup_in_store(c.english_term, DBI, data_source: "dbi:SQLite:/tmp/import.iconclass.sqlite")

                        if all_match(c.english_term.t, '.*\(with [^\(]*[A-Z][A-Z]+[^\(]*\).*')

                            replace_all('c.term\.code', '^\d(?:\d(?:([A-Z])(?:\1)?\d*)?)?\(([^\+][^\)]*)\)\d*(?:\(\+\d+\))?.*', '$2')
                            paste(c.english_term.t, 'c.term\.code', c.english_term.t, join_char:'##KEYWORD##')
                            replace_all(c.english_term.t, '(.*)##KEYWORD##(.*)\(with [^\(]*[A-Z][A-Z]+[^\(]*\)(.*)', '$1##KEYWORD##$2\($1\)$3')
                            replace_all(c.english_term.t, '(.*)##KEYWORD##(.*)\(with [^\(]*[A-Z][A-Z]+[^\(]*\)(.*)', '$1##KEYWORD##$2\($1\)$3')
                            replace_all(c.english_term.t, '.*##KEYWORD##(.*)', '$1')

                        end

                    end

                end

                if all_match(c.english_term.t, '.*\S.*')

                    lido_term(
                        descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectConcept.$last,
                        c.english_term.t,
                        -lang: en
                    )

                end

            end

        end

    end

    # Depicted subject

    unless is_array(or_record.depicted_subject) 
        move_field(or_record.depicted_subject, or_record.tmp)
        set_array(or_record.depicted_subject)
        move_field(or_record.tmp, or_record.depicted_subject.$append)
    end

    do list(path:or_record.depicted_subject, var:c)

        if all_match('c.content\.subject', '.*\S.*')

            if all_match('c.content\.subject\.type.value.2.content', 'geografie')

                lido_basenameset(
                    descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectPlace.$append.place.namePlaceSet,
                    'c.content\.subject'
                )

                if all_match('c.content\.subject\.lref', '.*\S.*')

                    lido_baseid(
                        descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectPlace.$last.place.placeID,
                        'c.content\.subject\.lref',
                        -source: Adlib,
                        -type: local
                    )

                end

            else

                if all_match('c.content\.subject\.type.value.2.content', 'gebeurtenis')

                    set_field(or_record.event_type, event)
                    set_field(or_record.event_type_URI, 'http://www.cidoc-crm.org/Entity/e5-event/version-6.2')

                    lido_term(
                        descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectEvent.$append.event.eventType,
                        or_record.event_type,
                        -conceptid: or_record.event_type_URI,
                        -type: purl,
                        -source: cidoc-crm
                    )

                    lido_basenameset(
                        descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectEvent.$last.event.eventName,
                        'c.content\.subject'
                    )

                    if all_match('c.content\.subject\.lref', '.*\S.*')

                        lido_baseid(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectEvent.$last.event.eventID,
                            'c.content\.subject\.lref',
                            -source: Adlib,
                            -type: local
                        )

                    end

                else

                    if all_match('c.content\.subject\.type.value.2.content', 'activiteit')

                        set_field(or_record.event_type, activity)
                        set_field(or_record.event_type_URI, 'http://www.cidoc-crm.org/Entity/e7-activity/version-6.2')

                        lido_term(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectEvent.$append.event.eventType,
                            or_record.event_type,
                            -conceptid: or_record.event_type_URI,
                            -type: purl,
                            -source: cidoc-crm
                        )

                        lido_basenameset(
                            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectEvent.$last.event.eventName,
                            'c.content\.subject'
                        )

                        if all_match('c.content\.subject\.lref', '.*\S.*')

                            lido_baseid(
                                descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectEvent.$last.event.eventID,
                                'c.content\.subject\.lref',
                                -source: Adlib,
                                -type: local
                            )

                        end

                    else

                        if all_match('c.content\.subject\.lref', '.*\S.*')

                            lido_term(
                                descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectConcept.$append,
                                'c.content\.subject',
                                -conceptid: 'c.content\.subject\.lref',
                                -type: local,
                                -source: Adlib
                            )

                        else

                            lido_term(
                                descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectConcept.$append,
                                'c.content\.subject'
                            )

                        end

                    end

                end

            end

        end

    end

# LIDO subjectActor

    unless is_array(or_record.depicted_person) 
        move_field(or_record.depicted_person, or_record.tmp)
        set_array(or_record.depicted_person)
        move_field(or_record.tmp, or_record.depicted_person.$append)
    end

    do list(path:or_record.depicted_person, var:c)

        if all_match('c.content\.person\.name', '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectActor.$append.actor.nameActorSet,
                'c.content\.person\.name'
            )

            if all_match('c.content\.person\.name\.lref', '.*\S.*')

                lido_baseid(
                    descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$last.subject.subjectActor.$last.actor.actorID,
                    'c.content\.person\.name\.lref',
                    -type: local,
                    -source: Adlib
                )

            end

        end

    end



### LIDO administrativeMetadata

## LIDO rightsWorkWrap

# LIDO creditLine

    set_array(creator_roles, 'architect', 'auteur', 'beeldhouwer', 'boekverluchter', 'cartograaf', 'etser', 'fotograaf', 'fotograveur', 'glazenier', 'graveur', 'houtsnijder', 'illustrator', 'kunstenaar', 'lithograaf', 'medailleur', 'ontwerper', 'ontwerper en uitgever', 'prentmaker', 'prentmaker en uitgever', 'schilder', 'schrijver', 'steenhouwer', 'tekenaar', 'tweede vervaardiger', 'vervaardiger')

    do list (path: or_record.production, var: c)

        copy_field(c.creator.name, or_record.creator_name)

        if all_match(or_record.creator_name, '.*\S.*')

            lookup_in_store(or_record.creator_name, DBI, data_source: 'dbi:SQLite:/tmp/import.Copyrights.sqlite')

            if all_match('c.creator\.qualifier.term', '.*\S.*')

                unless in('c.creator\.qualifier.term', creator_roles)

                    set_field(or_record.no_copyright, 'true')

                    if exists(or_record.legal_status)

                        remove_field(or_record.legal_status)

                    end

                    if exists(or_record.creativeCommons)

                        remove_field(or_record.creativeCommons)

                    end

                    if exists(or_record.rightsStatements)

                        remove_field(or_record.rightsStatements)

                    end

                end

            end

            if all_match('c.creator\.role.term', '.*\S.*')

                unless in('c.creator\.role.term', creator_roles)

                    set_field(or_record.no_copyright, 'true')

                    if exists(or_record.legal_status)

                        remove_field(or_record.legal_status)

                    end

                    if exists(or_record.creativeCommons)

                        remove_field(or_record.creativeCommons)

                    end

                    if exists(or_record.rightsStatements)

                        remove_field(or_record.rightsStatements)

                    end

                end

            end

            unless exists(or_record.creator_name.legalStatus)

                set_field(or_record.no_copyright, 'true')

                if exists(or_record.legal_status)

                    remove_field(or_record.legal_status)

                end

                if exists(or_record.creativeCommons)

                    remove_field(or_record.creativeCommons)

                end

                if exists(or_record.rightsStatements)

                    remove_field(or_record.rightsStatements)

                end

            end

            if exists(or_record.creator_name.legalStatus)

                unless all_match(or_record.creator_name.legalStatus, '.*\S.*')

                    set_field(or_record.no_copyright, 'true')

                    if exists(or_record.legal_status)

                        remove_field(or_record.legal_status)

                    end

                    if exists(or_record.creativeCommons)

                        remove_field(or_record.creativeCommons)

                    end

                    if exists(or_record.rightsStatements)

                        remove_field(or_record.rightsStatements)

                    end

                end

                if all_match(or_record.creator_name.legalStatus, '.*\S.*')

                    unless exists(or_record.no_copyright)

                        if all_match(or_record.creator_name.legalStatus, 'Auteursrechtplichtig.*')

                            copy_field(or_record.creator_name.legalStatus, or_record.legal_status)

                            if all_match(or_record.creator_name.creativeCommons, '.*\S.*')

                                copy_field(or_record.creator_name.creativeCommons, or_record.creativeCommons)

                            else

                                if exists(or_record.creativeCommons)

                                    remove_field(or_record.creativeCommons)

                                end

                            end

                            if all_match(or_record.creator_name.rightsStatements, '.*\S.*')

                                copy_field(or_record.creator_name.rightsStatements, or_record.rightsStatements)

                            else

                                if exists(or_record.rightsStatements)

                                    remove_field(or_record.rightsStatements)

                                end

                            end

                        else

                            unless exists(or_record.legal_status)

                                copy_field(or_record.creator_name.legalStatus, or_record.legal_status)

                                if all_match(or_record.creator_name.creativeCommons, '.*\S.*')

                                    copy_field(or_record.creator_name.creativeCommons, or_record.creativeCommons)

                                else

                                    if exists(or_record.creativeCommons)

                                        remove_field(or_record.creativeCommons)

                                    end

                                end

                                if all_match(or_record.creator_name.rightsStatements, '.*\S.*')

                                    copy_field(or_record.creator_name.rightsStatements, or_record.rightsStatements)

                                else

                                    if exists(or_record.rightsStatements)

                                        remove_field(or_record.rightsStatements)

                                    end

                                end

                            end

                        end

                    end

                end

            end

        end

        remove_field(or_record.creator_name)

    end

    if all_match(or_record.legal_status, '.*\S.*')

        lido_basevalue(
            administrativeMetadata.rightsWorkWrap.rightsWorkSet.creditLine,
            or_record.legal_status
        )

    end

    if all_match(or_record.creativeCommons, '.*\S.*')

        copy_field(or_record.creativeCommons, administrativeMetadata.rightsWorkWrap.rightsWorkSet.rightsType.$append.conceptID._)
        set_field(administrativeMetadata.rightsWorkWrap.rightsWorkSet.rightsType.$last.conceptID.source, 'Creative Commons')
        set_field(administrativeMetadata.rightsWorkWrap.rightsWorkSet.rightsType.$last.conceptID.type, 'purl')

    end

    if all_match(or_record.rightsStatements, '.*\S.*')

        copy_field(or_record.rightsStatements, administrativeMetadata.rightsWorkWrap.rightsWorkSet.rightsType.$append.conceptID._)
        set_field(administrativeMetadata.rightsWorkWrap.rightsWorkSet.rightsType.$last.conceptID.source, 'Rights Statements')
        set_field(administrativeMetadata.rightsWorkWrap.rightsWorkSet.rightsType.$last.conceptID.type, 'purl')

    end

    remove_field(or_record.no_copyright)
    remove_field(or_record.legal_status)
    remove_field(or_record.creativeCommons)
    remove_field(or_record.rightsStatements)
    remove_field(creator_roles)


## LIDO recordWrap

# LIDO recordID

#    do list(path:or_record.pids, var: c)

#        if all_match('c.digital_reference\.description', 'datapid')

#            if all_match(c.digital_reference, '.*\S.*')

#                lido_baseid(
#                    administrativeMetadata.recordWrap.recordID,
#                    c.digital_reference,
#                    -type: global
#                )

#            end

#        end

#    end

    if all_match(or_record.identificator.dataPid, '.*\S.*')

        lido_baseid(
            administrativeMetadata.recordWrap.recordID,
            or_record.identificator.dataPid,
            -type: global
        )

    end

    unless is_array(or_record.priref) 
        move_field(or_record.priref, or_record.tmp)
        set_array(or_record.priref)
        move_field(or_record.tmp, or_record.priref.$append)
    end

    do list(path:or_record.priref, var: c)

        if all_match(c,'.*\S.*')

            if exists(or_record.priref_tmp)

                unless in(or_record.priref_tmp, c)

                    lido_baseid(
                        administrativeMetadata.recordWrap.recordID,
                        c,
                        -type: local
                    )

                end

            else

                lido_baseid(
                    administrativeMetadata.recordWrap.recordID,
                    c,
                    -type: local
                )

            end

            copy_field(c, or_record.priref_tmp)

        end

    end

# LIDO recordType

    add_field('or_record.AATRecordTypeTerm', 'Item')
    add_field('or_record.AATRecordTypeID', 'http://vocab.getty.edu/aat/300133025')

    lido_term(
        administrativeMetadata.recordWrap.recordType,
        or_record.AATRecordTypeTerm,
        -conceptid: or_record.AATRecordTypeID,
        -type: local,
        -source: AAT
    )

# LIDO recordSource

    do list(path: or_record.institution, var: c)

        if all_match(c.name, '.*\S.*')

            lido_basenameset(
                administrativeMetadata.recordWrap.recordSource.legalBodyName,
                c.name,
                -value_lang: nl
            )

        end

    end

    add_field('or_record.LegalBodyWebLink', 'http://mskgent.be')

    lido_basevalue(
        administrativeMetadata.recordWrap.recordSource.legalBodyWeblink,
        or_record.LegalBodyWebLink
    )


## LIDO resourceWrap

# LIDO resourceID & linkResource

#    do list(path:or_record.pids, var: c)

#        if all_match('c.digital_reference\.description', 'representationpid')

#            if all_match(c.digital_reference, '.*\S.*')

#                copy_field(c.digital_reference, administrativeMetadata.resourceWrap.resourceSet.resourceID._)
#                add_field(administrativeMetadata.resourceWrap.resourceSet.resourceID.type, "purl")
#                add_field(administrativeMetadata.resourceWrap.resourceSet.resourceID.label, "representationPID")

#                copy_field(c.digital_reference, administrativeMetadata.resourceWrap.resourceSet.resourceRepresentation.linkResource._)

#            end

#        end

#    end

    if all_match(or_record.identificator.dataPid, '.*\S.*')

        copy_field('or_record.identificator.dataPid', 'or_record.identificator.representationPid')
        parse_text('or_record.identificator.representationPid', '(.*)/collection/work/data/(.*)')
        join_field('or_record.identificator.representationPid', '/collection/work/representation/')

        copy_field(or_record.identificator.representationPid, administrativeMetadata.resourceWrap.resourceSet.resourceID._)
        add_field(administrativeMetadata.resourceWrap.resourceSet.resourceID.type, "purl")
        add_field(administrativeMetadata.resourceWrap.resourceSet.resourceID.label, "representationPID")

        copy_field(or_record.identificator.representationPid, administrativeMetadata.resourceWrap.resourceSet.resourceRepresentation.linkResource._)

    end



### Add lang attributes to descriptiveMetadata and administrativeMetadata (required LIDO attributes)

    add_field(descriptiveMetadata.lang, nl)

    add_field(administrativeMetadata.lang, nl)



### Add empty values for required LIDO elements/attributes if not already exist

    if exists(descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet)
        do list(path:descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet, var:c)
            if exists(c.objectMeasurements.measurementsSet)
                unless exists(c.objectMeasurements.measurementsSet.measurementType)
                    add_field(c.objectMeasurements.measurementsSet.measurementType, "")
                end
                unless exists(c.objectMeasurements.measurementsSet.measurementUnit)
                    add_field(c.objectMeasurements.measurementsSet.measurementUnit, "")
                end
                unless exists(c.objectMeasurements.measurementsSet.measurementValue)
                    add_field(c.objectMeasurements.measurementsSet.measurementValue, "")
                end
            end
        end
    end



### Remove the 'or_record' structure

    remove_field(or_record)
