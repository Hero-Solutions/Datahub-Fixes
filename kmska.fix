
# Catmandu Fix

# Institution: Royal Museum for Fine Arts Antwerp
# Description: Converts TMS datastructures to LIDO 1.0
# Created: 8/11/2017


### Prepare an intermediate structure

# Copy relevant fields in order to create a dedicated lido structure

    # Identifiers

    copy_field(ObjectNumber, or_record.object_number.local)
    copy_field(ObjectID, or_record.object_number.tms)

    copy_field(ObjectNumber, or_record.object_number.pid)
    lookup_in_store(or_record.object_number.pid, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.Cit_KMSKApids_conversie_gecorrigeerd.sqlite')

    # objectWorkType

    copy_field(ClassificationID, or_record.objectWorkType.db)
    if all_equal(or_record.objectWorkType.db, '0')
        move_field(or_record.objectWorkType.db, or_record.objectWorkType.db._id)
        add_field(or_record.objectWorkType.db.term, 'n/a')
    else
        lookup_in_store(or_record.objectWorkType.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.classifications.sqlite')
    end

    # subjectWrap

    copy_field(ObjectID, or_record.subjectWrap.db)
    lookup_in_store(or_record.subjectWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.subjects.sqlite')

    # title

    copy_field(Title, or_record.titleSet.appellationValue)
    trim(or_record.titleSet.appellationValue)
    copy_field(TitleID, or_record.titleSet.sourceAppellation)
    trim(or_record.titleSet.sourceAppellation)

    # description

    copy_field(Description, or_record.descriptiveNote.$append)
    trim(or_record.descriptiveNote.$last)

    # objectMeasurements

    copy_field(ObjectID, or_record.objectMeasurements.db)
    lookup_in_store(or_record.objectMeasurements.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.dimensions.sqlite')
    do list(path:or_record.objectMeasurements.db.dimensions, var:d)
        if all_match(d.element, 'Volledig')
            copy_field(d, or_record.objectMeasurements.volledig.$append)
        end
    end

    # production actor (production)

    copy_field(DisplayName, or_record.creator.display)
    copy_field(NameID, or_record.creator.id)
    copy_field(Role, or_record.creator.role)
    trim(or_record.creator.display)
    trim(or_record.creator.pid)
    trim(or_record.creator.role)
    copy_field(AlphaSort, or_record.creator.viaf)

    # production date (production)

    copy_field(DateBegin, or_record.date.begin)
    copy_field(DateEnd, or_record.date.end)
    copy_field(Dated, or_record.date.display)
    trim(or_record.date.begin)
    trim(or_record.date.end)
    trim(or_record.date.display)

    # period

    copy_field(ObjectID, or_record.periodName)
    lookup_in_store(or_record.periodName, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.periods.sqlite')

    # place

    # eventMaterialsTech

    copy_field(Medium, or_record.eventMaterialsTech.display)
    unless all_match(Medium, '.*\S.*')
        add_field(or_record.eventMaterialsTech.display, 'n/a')
    end

    if is_null(Medium)
       add_field(or_record.eventMaterialsTech.display, 'n/a')
    end

    if exists(Institution)
        copy_field(Institution, or_record.legalBodyName)

        # Check for null or only spaces
        if is_null(Institution)
            add_field(or_record.legalBodyName, 'KMSKA')
        end
        unless all_match(Institution, '.*\S.*')
            add_field(or_record.legalBodyName, 'KMSKA')
        end
    else
        add_field(or_record.legalBodyName, 'KMSKA')
    end
    trim(or_record.legalBodyName)

# Remove all Adlib fields, retaining only the fields to create the lido structure

    retain(or_record)


### Mapping to lido structure

# Mapping Facets
# -----------------------------------------------------------------------------------------------
# TMS                             LIDO                              VKC
#                                    lido:lidoRecID               
#                                    lido:objectPublishedID    
#                                    lido:category
#   object_category                  lido:objectWorkType                 Type Kunstwerk
#                                    lido:classification
#   Object_name (AAT)                   pref: alternate
#   Object_name (Adlib)                 pref: preferred
#                                    lido:titleSet
#   Titel_translation                   pref: alternate
#   Title                               pref: preferred              
#   institution.name                 lido:repositoryName                 Museum
#   Description                      lido:objectDescriptionSet           Info over beeldgebruik
#   Dimension                        lido:displayObjectMeasurements      Afmetingen 
#                                    lido:eventType
#   Production.creator.value         lido:eventActor
#                                       pref: alternate
#                                       pref: preferred                  Kunstenaar
#   Production_date                  lido:displayDate                    Datering
#   Production_date                  lido:date
#                                    lido:periodName              
#   production.period.lref              lido:conceptID
#   production.period                   lido:term                        Periode
#   Material                         lido:termMaterialsTech
#   physical_description             lido:displayMaterialsTech           Materiaal
#   Production.production.place      lido:namePlaceSet
#   content.motif.general            lido:subjectConcept                 Voorstelling
#                                    lido:recordID
#   object_number                       type: local                      Inventarisnummer
#   priref                              type: Adlib
#                                    lido:recordType
#   institution.name                 lido:recordSource                   Museum


### LIDO lidoRecID

    lido_baseid(
        lidoRecID,
        or_record.object_number.pid.dataPid,
        -source: KMSKA,
        -type: global,
        -label: dataPID
    )

### LIDO objectPublishedID

    lido_baseid(
        objectPublishedID,
        or_record.object_number.pid.workPid,
        -source: KMSKA,
        -type: global,
        -label: workPID
    )


### LIDO category

    add_field(or_record.CIDOCCategoryTerm, 'Man-Made Object')
    add_field(or_record.CIDOCCategoryURI, 'http://www.cidoc-crm.org/crm-concepts/E22')

    lido_term(
        category,
        or_record.CIDOCCategoryTerm,
        -conceptid: or_record.CIDOCCategoryURI,
        -type: purl,
        -source: cidoc-crm
    )

### LIDO descriptiveMetadata

## LIDO objectClassificationWrap

# LIDO objectWorkType

    lido_term(
        descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append,
        or_record.objectWorkType.db.term,
        -lang: nl,
        -pref: preferred
    )

# LIDO classification

## LIDO objectIdentificationWrap

# LIDO titleSet

    lido_basenameset(
        descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet,
        or_record.titleSet.appellationValue,
        -value_pref: preferred,
        -value_lang: nl,
        -source: or_record.titleSet.sourceAppellation,
        -source_lang: nl
    )

# LIDO repositoryName

# LIDO objectDescriptionSet

    if all_match(or_record.descriptiveNote.$first, '.*\S.*')

        lido_descriptivenote(
            descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
            or_record.descriptiveNote.$first,
            -lang: 'nl'
        )

    end

# LIDO displayObjectMeasurements

    do list(path:or_record.objectMeasurements.volledig, var: m)
        lido_objectmeasurements(
            'Volledig',
            m.type,
            m.unit,
            m.dimension
        )
    end

## LIDO eventWrap

# LIDO eventType

    add_field(or_record.event_type, production)
    
    lido_term(
        descriptiveMetadata.eventWrap.eventSet.$append.event.eventType,
        or_record.event_type
    )

# LIDO eventActor

    lido_actor(
        descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor,
        or_record.creator.id,
        or_record.creator.display,
        -id_source: TMS,
        -id_type: local,
        -role: or_record.creator.role,
        -name_pref: preferred
    )

# Add Persistent URI data to actor

    copy_field(or_record.creator.display, or_record.creator.pid)

    lookup_in_store(or_record.creator.pid, DBI, data_source: "dbi:SQLite:/tmp/import.CREATORS_UTF8.sqlite")

    # Preferred label from Flemish Art Collection concordance database

    if all_match(or_record.creator.pid._id, '.*\S.*')

        lido_basenameset(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.nameActorSet.$last,
            or_record.creator.pid._id,
            -value_pref: alternate
        )

    end

    # Creator Persistent URI's

    if all_match(or_record.creator.pid.viaf_uri, '.*\S.*')

        lido_baseid(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
            or_record.creator.pid.viaf_uri,
            -source: VIAF,
            -type: purl
        )

    end

    if all_match(or_record.creator.pid.rkd_uri, '.*\S.*')

        lido_baseid(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
            or_record.creator.pid.rkd_uri,
            -source: RKD,
            -type: purl
        )

    end

    if all_match(or_record.creator.pid.wikidata_uri, '.*\S.*')

        lido_baseid(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
            or_record.creator.pid.wikidata_uri,
            -source: Wikidata,
            -type: purl
        )

    end

# LIDO displayDate

    lido_basevalue(
        descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.displayDate,
        or_record.date.display
    )

# LIDO date

    lido_date(
        descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
        -earliest_date: or_record.date.begin,
        -latest_date: or_record.date.end
    )

# LIDO periodName    

    lido_term(
        descriptiveMetadata.eventWrap.eventSet.$last.event.periodName,
        or_record.periodName.term,
        -lang: nl
    )

# LIDO termMaterialsTech

# LIDO displayMaterialsTech

    lido_basevalue(
        descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.displayMaterialsTech,
        or_record.eventMaterialsTech.display
    )

# LIDO namePlaceSet

## LIDO objectRelationWrap

# LIDO subjectConcept

    do list(path:or_record.subjectWrap.db.subjects, var:s)
        lido_term(
            descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectConcept,
            s.subject,
            -lang: nl
        )
    end

### LIDO administrativeMetadata

# LIDO recordID

lido_baseid(
    administrativeMetadata.recordWrap.recordID,
    or_record.object_number.local,
    -type: local
)

lido_baseid(
    administrativeMetadata.recordWrap.recordID,
    or_record.object_number.tms,
    -type: TMS
)

# LIDO recordType

    add_field('or_record.AATRecordTypeTerm', 'Item')
    add_field('or_record.AATRecordTypeID', 'http://vocab.getty.edu/aat/300133025')

    lido_term(
        administrativeMetadata.recordWrap.recordType,
        or_record.AATRecordTypeTerm,
        -conceptid: or_record.AATRecordTypeID,
        -type: local,
        -source: AAT
    )

# LIDO recordSource


    lido_basenameset(
        administrativeMetadata.recordWrap.recordSource.legalBodyName,
        or_record.legalBodyName
    )

    add_field(or_record.legalBodyWeblink, 'http://kmska.be')

    lido_basevalue(
        administrativeMetadata.recordWrap.recordSource.legalBodyWeblink,
        or_record.legalBodyWeblink
    )

### Add lang attributes to descriptiveMetadata and administrativeMetadata

    add_field(descriptiveMetadata.lang, 'nl')
    add_field(administrativeMetadata.lang, 'nl')

### Remove the 'or_record' structure

    remove_field(or_record)

