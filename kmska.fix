
# Catmandu Fix

# Institution: Royal Museum for Fine Arts Antwerp
# Description: Converts TMS datastructures to LIDO 1.0
# Created: 8/11/2017


### Prepare an intermediate structure

# Copy relevant fields in order to create a dedicated lido structure

    # Identifiers

    copy_field(ObjectNumber, or_record.object_number.local)
    copy_field(ObjectID, or_record.object_number.tms)

    copy_field(ObjectNumber, or_record.object_number.pid)
    lookup_in_store(or_record.object_number.pid, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.Cit_KMSKApids_conversie_gecorrigeerd.sqlite')

    # category

    add_field("or_record.category.term", "Man-Made Object")
    add_field("or_record.category.concept_id", "http://www.cidoc-crm.org/crm-concepts/E22")

    # objectWorkType

    copy_field(ClassificationID, or_record.objectWorkType.db)
    if all_equal(or_record.objectWorkType.db, '0')
        move_field(or_record.objectWorkType.db, or_record.objectWorkType.db._id)
        add_field(or_record.objectWorkType.db.term, 'n/a')
    else
        lookup_in_store(or_record.objectWorkType.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.classifications.sqlite')
    end

    # subjectWrap

    copy_field(ObjectID, or_record.subjectWrap.db)
    lookup_in_store(or_record.subjectWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.subjects.sqlite')

    # title

    copy_field(Title, or_record.titleSet.appellationValue)
    trim(or_record.titleSet.appellationValue)
    copy_field(TitleID, or_record.titleSet.sourceAppellation)
    trim(or_record.titleSet.sourceAppellation)

    # description

    copy_field(Description, or_record.descriptiveNote.$append)
    trim(or_record.descriptiveNote.$last)

    # objectMeasurements

    copy_field(ObjectID, or_record.objectMeasurements.db)
    lookup_in_store(or_record.objectMeasurements.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.dimensions.sqlite')
    do list(path:or_record.objectMeasurements.db.dimensions, var:d)
        if all_match(d.element, 'Volledig')
            copy_field(d, or_record.objectMeasurements.volledig.$append)
        end
    end

    # event (production)

    add_field(or_record.production_type, 'Production')

    # production actor (production)

    copy_field(DisplayName, or_record.creator.display)
    copy_field(NameID, or_record.creator.id)
    copy_field(Role, or_record.creator.role)
    trim(or_record.creator.display)
    trim(or_record.creator.pid)
    trim(or_record.creator.role)
    copy_field(AlphaSort, or_record.creator.viaf)

    # production date (production)

    copy_field(DateBegin, or_record.date.begin)
    copy_field(DateEnd, or_record.date.end)
    copy_field(Dated, or_record.date.display)
    trim(or_record.date.begin)
    trim(or_record.date.end)
    trim(or_record.date.display)

    # period

    copy_field(ObjectID, or_record.periodName)
    lookup_in_store(or_record.periodName, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.periods.sqlite')

    # place

    # eventMaterialsTech

    copy_field(Medium, or_record.eventMaterialsTech.display)
    unless all_match(Medium, '.*\S.*')
        add_field(or_record.eventMaterialsTech.display, 'n/a')
    end

    if is_null(Medium)
       add_field(or_record.eventMaterialsTech.display, 'n/a')
    end

    # recordType

    add_field('or_record.recordType.term', 'Item')
    add_field('or_record.recordType.conceptID', 'http://vocab.getty.edu/aat/300133025')

    # recordSource

    add_field(or_record.legalBodyWeblink, 'http://kmska.be')

    if exists(Institution)
        copy_field(Institution, or_record.legalBodyName)

        # Check for null or only spaces
        if is_null(Institution)
            add_field(or_record.legalBodyName, 'KMSKA')
        end
        unless all_match(Institution, '.*\S.*')
            add_field(or_record.legalBodyName, 'KMSKA')
        end
    else
        add_field(or_record.legalBodyName, 'KMSKA')
    end
    trim(or_record.legalBodyName)

# Remove all Adlib fields, retaining only the fields to create the lido structure

    retain(or_record)


### Mapping to lido structure

# Mapping Facets
# -----------------------------------------------------------------------------------------------
# TMS                             LIDO                              VKC
#                                    lido:lidoRecID               
#                                    lido:objectPublishedID    
#                                    lido:category
#   object_category                  lido:objectWorkType                 Type Kunstwerk
#                                    lido:classification
#   Object_name (AAT)                   pref: alternate
#   Object_name (Adlib)                 pref: preferred
#                                    lido:titleSet
#   Titel_translation                   pref: alternate
#   Title                               pref: preferred              
#   institution.name                 lido:repositoryName                 Museum
#   Description                      lido:objectDescriptionSet           Info over beeldgebruik
#   Dimension                        lido:displayObjectMeasurements      Afmetingen 
#                                    lido:eventType
#   Production.creator.value         lido:eventActor
#                                       pref: alternate
#                                       pref: preferred                  Kunstenaar
#   Production_date                  lido:displayDate                    Datering
#   Production_date                  lido:date
#                                    lido:periodName              
#   production.period.lref              lido:conceptID
#   production.period                   lido:term                        Periode
#   Material                         lido:termMaterialsTech
#   physical_description             lido:displayMaterialsTech           Materiaal
#   Production.production.place      lido:namePlaceSet
#   content.motif.general            lido:subjectConcept                 Voorstelling
#                                    lido:recordID
#   object_number                       type: local                      Inventarisnummer
#   priref                              type: Adlib
#                                    lido:recordType
#   institution.name                 lido:recordSource                   Museum



#
##
retain(or_record)

##
# Convert to LIDO
##

# lidoRecID
lido_baseid(
    lidoRecID,
# Resolver
#    or_record.object_number.pid.data.persistentURIs.0,
    or_record.object_number.pid.dataPid,
    -source: KMSKA,
    -type: global,
    -label: dataPID
)

# objectPublishedID
lido_baseid(
    objectPublishedID,
# Resolver
#    or_record.object_number.pid.data.persistentURIs.4,
    or_record.object_number.pid.workPid,
    -source: KMSKA,
    -type: global,
    -label: workPID
)


# category
lido_term(
    category,
    or_record.category.term,
    -conceptid: or_record.category.concept_id,
    -type: 'URI',
    -source: 'cidoc-crm'
)


# objectWorkType
lido_term(
    descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append,
    or_record.objectWorkType.db.term,
    -lang: nl,
    -pref: preferred
)

# subjectWrap
do list(path:or_record.subjectWrap.db.subjects, var:s)
    lido_term(
        descriptiveMetadata.objectRelationWrap.subjectWrap.subjectSet.$append.subject.subjectConcept,
        s.subject,
        -lang: nl
    )
end

# title
lido_basenameset(
    descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet,
    or_record.titleSet.appellationValue,
    -value_pref: preferred,
    -value_lang: nl,
    -source: or_record.titleSet.sourceAppellation,
    -source_lang: nl
)

# Description
#Chat
lido_descriptivenote(
    descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
    or_record.descriptiveNote.$first,
    -lang: 'nl'
)

# objectMeasurements
do list(path:or_record.objectMeasurements.volledig, var: m)
    lido_objectmeasurements(
        'Volledig',
        m.type,
        m.unit,
        m.dimension
    )
end

# recordSource
lido_basenameset(
    administrativeMetadata.recordWrap.recordSource.legalBodyName,
    or_record.legalBodyName
)

lido_basevalue(
    administrativeMetadata.recordWrap.recordSource.legalBodyWeblink,
    or_record.legalBodyWeblink
)

# recordID
lido_baseid(
    administrativeMetadata.recordWrap.recordID,
    or_record.object_number.local,
    -type: local
)

lido_baseid(
    administrativeMetadata.recordWrap.recordID,
    or_record.object_number.tms,
    -type: TMS
)

# recordType
lido_term(
    administrativeMetadata.recordWrap.recordType,
    or_record.recordType.term,
    -conceptid: or_record.recordType.conceptID,
    -type: local,
    -source: AAT
)

# Production
lido_term(
    descriptiveMetadata.eventWrap.eventSet.$append.event.eventType,
    or_record.production_type
)

# Production: Actor
lido_actor(
    descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor,
    or_record.creator.id,
    or_record.creator.display,
    -id_source: TMS,
    -id_type: local,
    -role: or_record.creator.role,
    -name_pref: preferred
)

# Add Persistent URI data to actor

    copy_field(or_record.creator.display, or_record.creator.pid)

    lookup_in_store(or_record.creator.pid, DBI, data_source: "dbi:SQLite:/tmp/import.CREATORS_UTF8.sqlite")

    # Preferred label from Flemish Art Collection concordance database

    if all_match(or_record.creator.pid._id, '.*\S.*')

        lido_basenameset(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.nameActorSet.$last,
            or_record.creator.pid._id,
            -value_pref: alternate
        )

    end

    # Creator Persistent URI's

    if all_match(or_record.creator.pid.viaf_uri, '.*\S.*')

        lido_baseid(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
            or_record.creator.pid.viaf_uri,
            -source: VIAF,
            -type: purl
        )

    end

    if all_match(or_record.creator.pid.rkd_uri, '.*\S.*')

        lido_baseid(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
            or_record.creator.pid.rkd_uri,
            -source: RKD,
            -type: purl
        )

    end

    if all_match(or_record.creator.pid.wikidata_uri, '.*\S.*')

        lido_baseid(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
            or_record.creator.pid.wikidata_uri,
            -source: Wikidata,
            -type: purl
        )

    end


# Production: Date
lido_date(
    descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
    -earliest_date: or_record.date.begin,
    -latest_date: or_record.date.end
)
lido_basevalue(
    descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.displayDate,
    or_record.date.display
)

# Production: Period
lido_term(
    descriptiveMetadata.eventWrap.eventSet.$last.event.periodName,
    or_record.periodName.term,
    -lang: nl
)

# Production: displayMaterialsTech
lido_basevalue(
    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.displayMaterialsTech,
    or_record.eventMaterialsTech.display
)

# Add lang attributes to descriptiveMetadata and administrativeMetadata
add_field(descriptiveMetadata.lang, 'nl')
add_field(administrativeMetadata.lang, 'nl')

#
##
remove_field(or_record)
#vacuum()