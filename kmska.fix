
# Catmandu Fix

# Institution: Royal Museum for Fine Arts Antwerp
# Description: Converts TMS datastructures to LIDO 1.0
# Created: 8/11/2017


### Prepare an intermediate structure

# Copy relevant fields in order to create a dedicated lido structure

    # Identifiers

    copy_field(ObjectNumber, or_record.object_number.local)
    copy_field(ObjectID, or_record.object_number.tms)

    copy_field(ObjectNumber, or_record.object_number.datapid)
    lookup_in_store(or_record.object_number.datapid, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.datapids.sqlite')
    move_field(or_record.object_number.datapid.dataPid, or_record.object_number.pid.dataPid)
    remove_field(or_record.object_number.datapid)

    copy_field(ObjectNumber, or_record.object_number.workpid)
    lookup_in_store(or_record.object_number.workpid, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.workpids.sqlite')
    move_field(or_record.object_number.workpid.workPid, or_record.object_number.pid.workPid)
    remove_field(or_record.object_number.workpid)

    copy_field(ObjectNumber, or_record.object_number.representationpid)
    lookup_in_store(or_record.object_number.representationpid, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.representationpids.sqlite')
    move_field(or_record.object_number.representationpid.representationPid, or_record.object_number.pid.representationPid)
    remove_field(or_record.object_number.representationpid)

    # objectWorkType

    copy_field(ObjectID, or_record.classificationWrap.db)
    lookup_in_store(or_record.classificationWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.classifications.sqlite')

    # objectWrap
    copy_field(ObjectID, or_record.objectWrap.db)
    lookup_in_store(or_record.objectWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.objects.sqlite')

    # subjectWrap
    copy_field(ObjectID, or_record.subjectWrap.db)
    lookup_in_store(or_record.subjectWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.subjects.sqlite')

    # materialWrap
    copy_field(ObjectID, or_record.materialWrap.db)
    lookup_in_store(or_record.materialWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.materials.sqlite')

    # title

    copy_field(ObjectNumber, or_record.title.db)
    lookup_in_store(or_record.title.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.objtitles.sqlite')

    copy_field(or_record.title.db.title, or_record.titleSet.appellationValue)
    trim(or_record.titleSet.appellationValue)
    copy_field(or_record.title.db.titleid, or_record.titleSet.sourceAppellation)
    trim(or_record.titleSet.sourceAppellation)

    # description

    copy_field(ObjectID, or_record.description.db)
    lookup_in_store(or_record.description.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.descriptions.sqlite')
    trim(or_record.description.db.description)

    # objectMeasurements

    copy_field(ObjectID, or_record.objectMeasurements.db)
    lookup_in_store(or_record.objectMeasurements.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.dimensions.sqlite')

    # production actor (production)

    copy_field(ObjectID, or_record.constituentWrap.db)
    lookup_in_store(or_record.constituentWrap.db, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.constituents.sqlite')

    # production date (production)

    add_field(or_record.date.begin, 'n/a')
    unless all_equal('DateBegin', '0')
        copy_field(DateBegin, or_record.date.begin)
    end

    add_field('or_record.date.end', 'n/a')
    unless all_equal(DateEnd, '0')
        copy_field(DateEnd, or_record.date.end)
    end

    add_field('or_record.date.display', 'n/a')
    if all_match('Dated', '.*\S.*')
        copy_field(Dated, or_record.date.display)
    end

    trim(or_record.date.begin)
    trim(or_record.date.end)
    trim(or_record.date.display)

    # period

    copy_field(ObjectID, or_record.periodName)
    lookup_in_store(or_record.periodName, DBI, data_source: 'dbi:SQLite:/tmp/tms_import.periods.sqlite')

    # place

    # eventMaterialsTech

    copy_field(Medium, or_record.eventMaterialsTech.display)
    unless all_match(Medium, '.*\S.*')
        add_field(or_record.eventMaterialsTech.display, 'n/a')
    end

    if is_null(Medium)
       add_field(or_record.eventMaterialsTech.display, 'n/a')
    end

    if all_match(Institution, '.*\S.*')
        copy_field(Institution, or_record.legalBodyName)
    else
        add_field(or_record.legalBodyName, 'Koninklijk Museum voor Schone Kunsten Antwerpen')
    end
    trim(or_record.legalBodyName)

# Remove all TMS fields, retaining only the fields to create the lido structure

    retain(or_record)



### LIDO lidoRecID

    # ID
    #
    # The ID in Solr is based on the data_pid. The data_pid is converted to a string
    # which can be safely used as an identifier in Project Blacklight. The format of
    # the ID field looks like this:
    #
    #   oai:datahub.vlaamsekunstcollectie.be:<domain>:<identifier>
    #   ex. oai:datahub.vlaamsekunstcollectie.be:kmksa.be:254
    #   ex. oai:datahub.vlaamsekunstcollectie.be:collectievlaamsegemeenschap.be:837
    #
    # Note: the .tld is stripped from the domainname because the . (dot) breaks the
    # route matching algoritm.

    copy_field('or_record.object_number.pid.dataPid', 'or_record.object_number.pid.oaiPid')
    parse_text('or_record.object_number.pid.oaiPid', '.*://([A-Za-z0-9\-\.]+)/collection/work/data/(.*)')
    join_field('or_record.object_number.pid.oaiPid', ':')
    prepend('or_record.object_number.pid.oaiPid', 'oai:datahub.vlaamsekunstcollectie.be:')

    lido_baseid(
        lidoRecID,
        or_record.object_number.pid.dataPid,
        -type: purl,
        -source: 'Koninklijk Museum voor Schone Kunsten Antwerpen',
        -label: dataPID,
        -pref: alternate
    )

    lido_baseid(
        lidoRecID,
        or_record.object_number.pid.oaiPid,
        -type: urn,
        -source: 'Vlaamse Kunstcollectie - Arthub Flanders',
        -label: dataPID,
        -pref: preferred
    )

### LIDO objectPublishedID

    lido_baseid(
        objectPublishedID,
        or_record.object_number.pid.workPid,
        -source: 'Koninklijk Museum voor Schone Kunsten Antwerpen',
        -type: purl,
        -label: workPID
    )


### LIDO category

    add_field(or_record.CIDOCCategoryTerm, 'Man-Made Object')
    add_field(or_record.CIDOCCategoryURI, 'http://www.cidoc-crm.org/Entity/e22-man-made-object/version-6.1')

    lido_term(
        category,
        or_record.CIDOCCategoryTerm,
        -conceptid: or_record.CIDOCCategoryURI,
        -type: purl,
        -source: cidoc-crm
    )

### LIDO descriptiveMetadata

## LIDO objectClassificationWrap

# LIDO objectWorkType

    # We'll have multiple objectWorkTypes: the corresponding value in AAT (type:alternate) and the value from TMS (type:preferred)

    do list(path:or_record.objectWrap.db.objects, var:o)

        lido_term(
            descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$append,
            o.object,
            -conceptid: o.TermID,
            -type: local,
            -source: TMS,
            -pref: preferred,
            -lang: nl
        )

        # Corresponding value in AAT, not (yet) retrievable via TMS

        copy_field(o.object, o.aat)

        lookup_in_store(o.aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

        if all_match(o.aat.aatterm, '.*\S.*')

            if all_match(o.aat.aaturi, '.*\S.*')

                lido_term(
                    descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                    o.aat.aatterm,
                    -conceptid: o.aat.aaturi,
                    -type: purl,
                    -source: AAT,
                    -pref: alternate,
                    -lang: nl
                )

            else

                lido_term(
                    descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.$last,
                    o.aat.aatterm,
                    -pref: alternate,
                    -lang: nl
                )                

            end

        end

    end

# LIDO classification [type="objectcategorie"]

    # We'll have multiple classifications with type "objectcategorie": the corresponding value in AAT (type:alternate) and the value from TMS (type:preferred)

    do list(path:or_record.classificationWrap.db.classifications, var:c)

        lido_term(
            descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append,
            c.Classification,
            -conceptid: c.ClassificationID,
            -type: local,
            -source: TMS,
            -pref: preferred,
            -lang: nl
        )

        add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.type, "objectcategorie")

        # Corresponding value in AAT, not (yet) retrievable via TMS

        copy_field(c.Classification, or_record.classification.aat)

        lookup_in_store(or_record.classification.aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

        if all_match(or_record.classification.aat.aatterm, '.*\S.*')

            if all_match(or_record.classification.aat.aaturi, '.*\S.*')

                lido_term(
                    descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                    or_record.classification.aat.aatterm,
                    -conceptid: or_record.classification.aat.aaturi,
                    -type: purl,
                    -source: AAT,
                    -pref: alternate,
                    -lang: nl
                )

            else

                lido_term(
                    descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                    or_record.classification.aat.aatterm,
                    -pref: alternate,
                    -lang: nl
                )                

            end

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.type, "objectcategorie")

        end

    end

# LIDO classification [type="hoofdmotief"]

    # We'll have multiple classifications with type "hoofdmotief": the corresponding value in AAT (type:alternate) and the value from TMS (type:preferred)

    do list(path:or_record.subjectWrap.db.subjects, var:s)
        
        lido_term(
            descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$append,
            s.subject,
            -conceptid: s.TermID,
            -type: local,
            -source: TMS,
            -pref: preferred,
            -lang: nl
        )

        add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.type, "hoofdmotief")

        # Corresponding value in AAT, not (yet) retrievable via TMS

        copy_field(s.subject, s.aat)

        downcase(s.aat)

        lookup_in_store(s.aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

        if all_match(s.aat.aatterm, '.*\S.*')

            if all_match(s.aat.aaturi, '.*\S.*')

                lido_term(
                    descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                    s.aat.aatterm,
                    -conceptid: s.aat.aaturi,
                    -type: purl,
                    -source: AAT,
                    -pref: alternate,
                    -lang: nl
                )

            else

                lido_term(
                    descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last,
                    s.aat.aatterm,
                    -pref: alternate,
                    -lang: nl
                )

            end

            add_field(descriptiveMetadata.objectClassificationWrap.classificationWrap.classification.$last.type, "hoofdmotief")

        end

    end

## LIDO objectIdentificationWrap

# LIDO titleSet

    lido_basenameset(
        descriptiveMetadata.objectIdentificationWrap.titleWrap.titleSet,
        or_record.titleSet.appellationValue,
        -value_pref: preferred,
        -value_lang: nl,
        -source: or_record.titleSet.sourceAppellation,
        -source_lang: nl
    )

# LIDO repositoryName

# LIDO workID

    lido_baseid(
        descriptiveMetadata.objectIdentificationWrap.repositoryWrap.repositorySet.workID,
        or_record.object_number.local,
        -type: objectnummer
    )

# LIDO objectDescriptionSet

    if all_match(or_record.description.db.description, '.*\S.*')

        lido_descriptivenote(
            descriptiveMetadata.objectIdentificationWrap.objectDescriptionWrap.objectDescriptionSet,
            or_record.description.db.description,
            -lang: 'nl'
        )

    end

# LIDO objectMeasurementsWrap

    do list(path:or_record.objectMeasurements.db.dimensions, var:d)

        add_field(descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$append)

        if all_match(d.display, '.*\S.*')

            copy_field(d.display, descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.displayObjectMeasurements._)

        end

        if all_match(d.type, '.*\S.*')

            copy_field(d.type, descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.measurementsSet.measurementType._)

        end

        if all_match(d.unit, '.*\S.*')

            copy_field(d.unit, descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.measurementsSet.measurementUnit._)

        end

        if all_match(d.dimension, '.*\S.*')

            copy_field(d.dimension, descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.measurementsSet.measurementValue._)

        end

        if all_match(d.element, '.*\S.*')

            copy_field(d.element, descriptiveMetadata.objectIdentificationWrap.objectMeasurementsWrap.objectMeasurementsSet.$last.objectMeasurements.extentMeasurements._)

        end

    end

## LIDO eventWrap

# LIDO eventType

    add_field(or_record.event_type, production)
    
    lido_term(
        descriptiveMetadata.eventWrap.eventSet.$append.event.eventType,
        or_record.event_type
    )

# LIDO eventActor

    set_array(qualifiers, "atelier van", "kopie naar", "navolger van", "omgeving van", "school van", "toegeschreven aan", "x")

    do list(path:or_record.constituentWrap.db.constituents, var:c)

        trim(c.BeginDateISO)
        trim(c.EndDateISO)
        
        if in(c.Role, qualifiers)
            lido_actor(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$append,
                c.ConstituentID,
                c.DisplayName,
                -id_source: TMS,
                -id_type: local,
                -birthdate: c.BeginDateISO,
                -deathdate: c.EndDateISO,
                -qualifier: c.Role,
                -name_pref: preferred
            )
        else
            lido_actor(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.$append,
                c.ConstituentID,
                c.DisplayName,
                -id_source: TMS,
                -id_type: local,
                -birthdate: c.BeginDateISO,
                -deathdate: c.EndDateISO,
                -role: c.Role,
                -name_pref: preferred
            )
        end

        # Add Persistent URI data to actor

        copy_field(c.DisplayName, or_record.creator.pid)

        downcase(or_record.creator.pid)

        lookup_in_store(or_record.creator.pid, DBI, data_source: "dbi:SQLite:/tmp/import.CREATORS_UTF8.sqlite")

        # Preferred label from Flemish Art Collection concordance database

        if all_match(or_record.creator.pid._id, '.*\S.*')

            lido_basenameset(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.nameActorSet.$last,
                or_record.creator.pid.display_name,
                -value_pref: alternate
            )

        end

        # Creator Persistent URI's

        if all_match(or_record.creator.pid.viaf_uri, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
                or_record.creator.pid.viaf_uri,
                -source: VIAF,
                -type: purl
            )

        end

        if all_match(or_record.creator.pid.rkd_uri, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
                or_record.creator.pid.rkd_uri,
                -source: RKD,
                -type: purl
            )

        end

        if all_match(or_record.creator.pid.wikidata_uri, '.*\S.*')

            lido_baseid(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventActor.actorInRole.actor.actorID,
                or_record.creator.pid.wikidata_uri,
                -source: Wikidata,
                -type: purl
            )

        end

    end

    remove_field(qualifiers)

# LIDO displayDate

    unless all_match(or_record.date.display, 'n/a')

        lido_basevalue(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.displayDate,
            or_record.date.display
        )

    end

# LIDO date

    if all_match(or_record.date.begin, 'n/a')

        unless all_match(or_record.date.end, 'n/a')

            lido_date(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                -latest_date: or_record.date.end
            )

        end

    else

        if all_match(or_record.date.end, 'n/a')

            lido_date(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                -earliest_date: or_record.date.begin
            )            

        else

            lido_date(
                descriptiveMetadata.eventWrap.eventSet.$last.event.eventDate.date,
                -earliest_date: or_record.date.begin,
                -latest_date: or_record.date.end
            )

        end

    end

# LIDO periodName    

    lido_term(
        descriptiveMetadata.eventWrap.eventSet.$last.event.periodName,
        or_record.periodName.term,
        -lang: nl
    )

# LIDO termMaterialsTech

    # We'll have multiple eventMaterialsTechs: the corresponding value in AAT (type:alternate) and the value from TMS (type:preferred)

    do list(path:or_record.materialWrap.db.materials, var:m)
        
        lido_term(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.materialsTech.termMaterialsTech.$append,
            m.material,
            -conceptid: m.TermID,
            -type: local,
            -source: TMS,
            -pref: preferred,
            -lang: nl
        )

        # Corresponding value in AAT, not (yet) retrievable via TMS

        copy_field(m.subject, m.aat)

        downcase(m.aat)

        lookup_in_store(m.aat, DBI, data_source: "dbi:SQLite:/tmp/import.AAT_UTF8.sqlite")

        if all_match(m.aat.aatterm, '.*\S.*')

            if all_match(m.aat.aaturi, '.*\S.*')

                lido_term(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                    m.aat.aatterm,
                    -conceptid: m.aat.aaturi,
                    -type: purl,
                    -source: AAT,
                    -pref: alternate,
                    -lang: nl
                )

            else

                lido_term(
                    descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$last.materialsTech.termMaterialsTech.$last,
                    m.aat.aatterm,
                    -pref: alternate,
                    -lang: nl
                )

            end

        end

    end

# LIDO displayMaterialsTech

    unless all_match(or_record.eventMaterialsTech.display, 'n/a')

        lido_basevalue(
            descriptiveMetadata.eventWrap.eventSet.$last.event.eventMaterialsTech.$append.displayMaterialsTech,
            or_record.eventMaterialsTech.display
        )

    end

# LIDO namePlaceSet

## LIDO objectRelationWrap

# LIDO subjectConcept

### LIDO administrativeMetadata

# LIDO recordID

lido_baseid(
    administrativeMetadata.recordWrap.recordID,
    or_record.object_number.pid.dataPid,
    -type: global
)

lido_baseid(
    administrativeMetadata.recordWrap.recordID,
    or_record.object_number.tms,
    -type: local
)

# LIDO recordType

    add_field('or_record.AATRecordTypeTerm', 'Item')
    add_field('or_record.AATRecordTypeID', 'http://vocab.getty.edu/aat/300133025')

    lido_term(
        administrativeMetadata.recordWrap.recordType,
        or_record.AATRecordTypeTerm,
        -conceptid: or_record.AATRecordTypeID,
        -type: local,
        -source: AAT
    )

# LIDO recordSource

    lido_basenameset(
        administrativeMetadata.recordWrap.recordSource.legalBodyName,
        or_record.legalBodyName
    )

    add_field(or_record.legalBodyWeblink, 'http://kmska.be')

    lido_basevalue(
        administrativeMetadata.recordWrap.recordSource.legalBodyWeblink,
        or_record.legalBodyWeblink
    )


## LIDO resourceWrap

# LIDO resourceID & linkResource

    if all_match(or_record.object_number.pid.representationPid, '.*\S.*')

        copy_field(or_record.object_number.pid.representationPid, administrativeMetadata.resourceWrap.resourceSet.resourceID._)
        add_field(administrativeMetadata.resourceWrap.resourceSet.resourceID.type, "purl")

        copy_field(or_record.object_number.pid.representationPid, administrativeMetadata.resourceWrap.resourceSet.resourceRepresentation.linkResource._)

    end



### Add lang attributes to descriptiveMetadata and administrativeMetadata

    add_field(descriptiveMetadata.lang, 'nl')
    add_field(administrativeMetadata.lang, 'nl')



### Add empty values for required LIDO elements/attributes if not already exist

    unless exists(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType)
        add_field(descriptiveMetadata.objectClassificationWrap.objectWorkTypeWrap.objectWorkType.term._, "")
    end



### Remove the 'or_record' structure

    remove_field(or_record)
